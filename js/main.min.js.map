{"version":3,"file":"main.min.js","sources":["js/data/config.js","js/data/data.js","js/data/game-static-data.js","js/utilities.js","js/network/server-communication.js","js/network/resouce-preloader.js","js/views/abstract-view.js","js/views/start-screen-view.js","js/presenters/start-screen.js","js/views/level-header-screen-view.js","js/process/tracks-controller.js","js/views/level-screen-view.js","js/views/modal-confirm-view.js","js/models/game-model.js","js/presenters/level-screen.js","js/process/process.js","js/views/result-screen-view.js","js/views/modal-load-animatin-view.js","js/process/statistics.js","js/presenters/result-screen.js","js/application.js","js/views/modal-error-view.js","js/main.js"],"sourcesContent":["/**\n * Модуль содержит статические исходные данные конфигурации игры\n */\n\nconst GAME_PARAM = {\n  initLevel: 0, // начальный уровень\n  totalLives: 3, // колличество жизней\n  totalTime: 300, // общее время игры (секунд)\n  limitTime: 30, // время (секунд), до достижения которого ответ считается быстрым\n  timeTick: 1000, // значение единицы игрового времени (1 секудна)\n  lowTime: 30, // время (секунд), после которого считается, что до конца игры осталось мало времени\n  quickRatio: 2, // колличество очков за каждый быстрый ответ\n  correctRatio: 1, // колличество очков за каждый правильный ответ\n  failRatio: -2 // колличество очков за каждую ошибку\n};\n\nconst DEBUG_MODE = true || window.location.hash.toLowerCase().includes('debug');\n\nexport {GAME_PARAM, DEBUG_MODE};\n","/**\n * Содержит структуры данных для использования в игре\n */\nimport {GAME_PARAM} from './config.js';\n\nexport const INITIAL_STATE = {\n  level: GAME_PARAM.initLevel,\n  wrong: 0, // колличество неправильных ответов\n  lives: GAME_PARAM.totalLives,\n  totalTime: GAME_PARAM.totalTime,\n  currentTime: GAME_PARAM.totalTime,\n  statistics: []\n};\n\nexport const GAME_DATA = {\n  appId: '',\n  questions: [],\n  statistics: []\n};\n","/**\n * Временный модуль для тестирования\n * Содержит статические данные для генерации вопросов\n * В реальности эти данные должны получаться с сервера\n */\n\n// Music from https://www.youtube.com/audiolibrary/music?feature=blog\nexport default [\n  {\n    artist: `Kevin MacLeod`,\n    name: `Long Stroll`,\n    image: `https://yt3.ggpht.com/-fkDeGauT7Co/AAAAAAAAAAI/AAAAAAAAAAA/dkF5ZKkrxRo/s900-c-k-no-mo-rj-c0xffffff/photo.jpg`,\n    src: `https://files.freemusicarchive.org/storage-freemusicarchive-org/music/no_curator/Kevin_MacLeod/Oddities/Kevin_MacLeod_-_Sinfonia_3.mp3`,\n    genre: `Jazz`\n  },\n  {\n    artist: `Jingle Punks`,\n    name: `In the Land of Rhinoplasty`,\n    image: `https://i.vimeocdn.com/portrait/992615_300x300`,\n    src: `https://files.freemusicarchive.org/storage-freemusicarchive-org/music/no_curator/Kevin_MacLeod/Oddities/Kevin_MacLeod_-_Sing_Along_with_Jim.mp3`,\n    genre: `Rock`\n  },\n  {\n    artist: `Audionautix`,\n    name: `Travel Light`,\n    image: `http://4.bp.blogspot.com/-kft9qu5ET6U/VPFUBi9W-MI/AAAAAAAACYM/UxXilXKYwOc/s1600/audionautix%2BHalf%2BSize.jpg`,\n    src: `https://files.freemusicarchive.org/storage-freemusicarchive-org/music/ccCommunity/Jason_Shaw/Audionautix_Acoustic/Jason_Shaw_-_TRAVEL_LIGHT.mp3`,\n    genre: `Country`\n  },\n  {\n    artist: `Riot`,\n    name: `Level Plane`,\n    image: `https://yt3.ggpht.com/a/AGF-l7-BSwMnN5-kvIOxYVDXV1TRBG-G8LTRpjsHPQ=s48-c-k-c0xffffffff-no-rj-mo`,\n    src: `https://files.freemusicarchive.org/storage-freemusicarchive-org/music/WFMU/Steve_Combs/Riot/Steve_Combs_-_11_-_More_Or_Less_OK.mp3`,\n    genre: `R&B`\n  },\n  {\n    artist: `Jingle Punks`,\n    name: `Lucky Day`,\n    image: `https://i.vimeocdn.com/portrait/992615_300x300`,\n    src: `https://files.freemusicarchive.org/storage-freemusicarchive-org/music/ccCommunity/Jason_Shaw/Audionautix_Acoustic/Jason_Shaw_-_SERENITY.mp3`,\n    genre: `Pop`\n  },\n  {\n    artist: `Quincas Moreira`,\n    name: `Firefly`,\n    image: `https://assets.mubi.com/images/cast_member/535878/image-w240.jpg?1523578011`,\n    src: `https://files.freemusicarchive.org/storage-freemusicarchive-org/music/WFMU/Steve_Combs/Riot/Steve_Combs_-_04_-_Its_Kicking_In.mp3`,\n    genre: `Electronic`\n  }\n];\n","/**\n * Модуль с общими функциями, используемыми другими модулями\n */\n\n/**\n * Возвращает случайное целое число в заданном диапазоне min-max включая обе границы\n * @param {number} min - нижний предел диапазона в котором генерируется случайное число\n * @param {number} max - верхний предел диапазона в котором генерируется случайное число\n * @return {number} - псевдослучайное число в заданном диапазоне\n */\nexport function getRandomIntInclusive(min = 0, max) {\n  const bottomLimit = Math.ceil(min);\n  const upperLimit = Math.floor(max);\n  return Math.floor(Math.random() * (upperLimit - bottomLimit + 1)) + bottomLimit; // Максимум и минимум включаются\n}\n\n/**\n * Возвращает идентификатор текущей сессии игры\n * @return {string} - строка идентификатора текущей сессии игры\n */\nexport function createAppId() {\n  const browser = window.navigator.userAgent.split(' ').splice(-2, 1);\n\n  return `${browser}_${Date.now()}`;\n}\n\n/**\n * Возвращает колличество минут и секунд из времени, представленном в миллисекундах\n * Значения из одного символа дополняются до двузначного представления нулем в начале\n * @param {number} time - колличество миллисекунд\n * @return {array} - массив с колличеством минут и секунд\n */\nexport function getTimeComponents(time) {\n  const date = new Date();\n  date.setTime(time * 1000);\n  const timeComponents = date.toLocaleTimeString('en-US', {hour12: false}).split(':');\n  const minuts = timeComponents[1];\n  const seconds = timeComponents[2];\n\n  return {minuts, seconds};\n}\n\n/**\n * Функция склонения слов идущим за заданным числом\n * Например, 1 комментарИЙ, 2 комментарИЯ, 10 комментарИЕВ\n * @param {number} number - число, в соотвествии с которым нужно изменить окончание следующего за ним слова\n * @param {array} word - массив слов, которые идут за этим числом с соответствующими окончаниями\n *  массив должен быть со следующими словами [склонение слова для числа 1, склонение слова для числа 2, склонение слова для числа 0]\n * @return {string} - строка вида 'число слово_в_склоненни_соответствующего_числу'\n */\nexport function wordFrom(number, word) {\n  const num = +number;\n  if (isNaN(num)) {\n    return word[2];\n  }\n\n  const cases = [2, 0, 1, 1, 1, 2];\n  return `${num} ${word[(num % 100 > 4 && num % 100 < 20) ? 2 : cases[(num % 10 < 5) ? num % 10 : 5]]}`;\n}\n\n/**\n * Функция расчета параметров анимации SVG-элемента отображающим оставшееся время\n * SVG-элемент в верстке представлен в виде круга, длинна которого уменьшается с уменьшением оставшегося времени\n * Убывание круга анимируется увеличением значения stroke-dashoffset при постоянном stroke-dasharray равном длинне окружности\n * @param {number} timePercent - число от 0 до 1, представляющее отношение оставшегося времени к общему времени игры\n * @param {number} circleLength - общая длинна окружности SVG єлемента, получается вызовом метода getTotalLength() на SVG-элементе круга\n * @return {object} - объект содержащий числовые значения для stroke-dasharray и stroke-dashoffset\n */\nexport function getTimeAnimationRadius(timePercent, circleLength) {\n  const stroke = Math.ceil(circleLength);\n  const offset = Math.floor((1 - timePercent) * stroke);\n\n  return {stroke, offset};\n}\n\n/**\n * Функция показа представления игрового экрана\n * @param {object} element - DOM-элемент контейнер с разметкой, который нужно отобразить на экране\n * @param {boolean} containerClear - флаг очистки предыдущего содержимого контейнера\n */\nexport function showScreen(element, containerClear = true) {\n  // контейнер, в котором отображаются все игровые окна\n  const screensContainer = document.querySelector('.main');\n\n  if (containerClear) {\n    screensContainer.textContent = '';\n  }\n\n  screensContainer.append(element);\n}\n","/**\n * Модуль содержит для получения/отправки данных на сервер\n */\nimport staticData from '../data/game-static-data.js';\nimport {GAME_DATA} from '../data/data.js';\nimport {getRandomIntInclusive} from '../utilities.js';\n\n// ссылки на URL-адрес взаимодействия с сервером\n// тестовые, должны быть заменены на реальные адреса\nconst SERVER_URLS = {\n  questions: 'http://httpbin.org/get?foo1=bar1&foo2=bar2',\n  getStatistics: 'http://httpbin.org/get',\n  setStatistics: 'http://httpbin.org/post'\n};\n\n/**\n * Функция получения данных по вопросам с сервера\n * Временно генерирует объект с вопросами для уровней игры на основе статических данных\n * @return {object} - объект с данными о вопросах\n */\nexport async function loadQuestions() {\n  // временно генерируем статические данные\n  const gameQuestions = getQuestions(\n      ['artist', 'genre', 'genre', 'genre', 'artist', 'artist', 'genre', 'genre', 'artist', 'artist'],\n      ['Кто исполняет эту песню?', 'Выберите рок треки', 'Выберите джаз треки', 'Выберите РНБ треки',\n        'Кто исполняет эту песню?', 'Кто исполняет эту песню?', 'Выберите поп треки', 'Выберите электроник треки',\n        'Кто исполняет эту песню?', 'Кто исполняет эту песню?']\n  );\n\n  const response = await fetch(SERVER_URLS.questions, {\n    method: 'GET',\n    redirect: 'follow'\n  });\n\n  checkServerResp(response);\n\n  await response.json();\n\n  // временно возвращаем статические данные для игры\n  // нужно заменить на реальное взаимодействие с сервером\n  return gameQuestions;\n}\n\n/**\n * Функция получения статистики с результатами игор пользователей с сервера\n * Временно сохраняет статические данные локально, без взаимодейстия с сервером\n * @return {array} - массив статистики результатов игры всех пользователей\n */\nexport async function loadStatistics() {\n  // временно мокаем локальное хранилище статическими данными\n  // пока не будет правильного URL на сервер хранения статистики\n  if (!GAME_DATA.statistics.length) {\n    GAME_DATA.statistics = [11, 10, 9];\n  }\n\n  // запрос на URL с уникальным номером сессии текущей игры\n  const url = `${SERVER_URLS.getStatistics}?appId=${GAME_DATA.appId}`;\n\n  // запрос статистики\n  const response = await fetch(url, {\n    method: 'GET',\n    redirect: 'follow'\n  });\n\n  // проверка статуса ответа\n  checkServerResp(response);\n  await response.json();\n\n  return GAME_DATA.statistics;\n}\n\n/**\n * Функция отправки результатов игры на сервер\n * Временно сохраняет результаты локально, без взаимодействия с сервером\n * @param {array} statistics - массив статистики результатов игры других пользователей и текущего игрока\n */\nexport async function sendStatistics(statistics) {\n  // временно сохраняем статические данные локально\n  GAME_DATA.statistics = statistics;\n\n  // запрос на URL с уникальным номером сессии текущей игры\n  const url = `${SERVER_URLS.setStatistics}?appId=${GAME_DATA.appId}`;\n  const body = {answers: statistics};\n\n  // запрос статистики\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8'\n    },\n    body: JSON.stringify(body)\n  });\n\n  // проверка статуса ответа\n  checkServerResp(response);\n}\n\n/**\n * Функция проверки статуса ответа сервера\n * @param {object} response - объект со статусом ответа\n */\nfunction checkServerResp(response) {\n  if (!response.ok) { // если HTTP-статус НЕ в диапазоне 200-299\n    // получаем тело ответа\n    throw new Error();\n  }\n}\n\n/**\n * Временная функция для генерации вопросов для игры на основе статической информации\n * @param {array} types - массив типов каждого вопроса ('artist' - угадай исполнителя, 'genre' - жанр)\n * @param {array} titles - массив содержащий строки с тексотом вопроса\n * @return {array} - массив объектов с вопросами и вариантами ответов для каждого уровня игры\n */\nfunction getQuestions(types, titles) {\n  // структура, хранящая вопросы для всех уровней игры\n  const questionTemplate = {\n    type: '',\n    title: '',\n    srcs: [],\n    answers: []\n  };\n\n  // структура для хранения информации по ответам на вопросы\n  const answerTemplate = {\n    artist: '',\n    name: '',\n    img: '',\n    src: '',\n    isCorrect: true\n  };\n\n  // здесь будет сгенерированный массив вопросов и ответов к игре\n  const gameQuestions = [];\n\n  types.forEach((type, index) => {\n    const question = Object.assign({}, questionTemplate);\n\n    question.type = type;\n    question.title = titles[index];\n\n    // генерируем массивы случайных числе для вопросов и вариантов ответов\n    // в массивы попадут только индексы ограничивающиеся длинной статического массива данных {staticData}\n    const questionIndexes = new Set();\n    const answerIndexes = new Set();\n\n    if (type === 'artist') {\n      // для типа игры на выбо артиста\n      // 3 варианта ответов\n      while (answerIndexes.size < 3) {\n        answerIndexes.add(getRandomIntInclusive(0, staticData.length - 1));\n      }\n\n      // 1 вопрос\n      questionIndexes.add(Array.from(answerIndexes)[getRandomIntInclusive(0, answerIndexes.size - 1)]);\n\n    } else if (type === 'genre') {\n      // для типа игры на выбо жанра\n      // 4 варианта ответов\n      while (answerIndexes.size < 4) {\n        answerIndexes.add(getRandomIntInclusive(0, staticData.length - 1));\n      }\n\n      // 1 вопрос, но генерируется масси индексов от 1 до 2 вариантов\n      // поскольку корректность вариантов в этой функции устанавливается\n      // путем сравнения ссылки на аудиофайл в вопросах и вариантах ответов\n      const questionVariants = getRandomIntInclusive(1, 2);\n\n      while (questionIndexes.size < questionVariants) {\n        questionIndexes.add(Array.from(answerIndexes)[getRandomIntInclusive(0, answerIndexes.size - 1)]);\n      }\n    }\n\n    // временный массив в который будут копироваться результаты вложенных объектов для src и answer\n    // т.к. Object.assign создаст поверхностную копию, а внутренние объекты будут ссылками\n    // и без этого объекта во все внутренние объекты question для каждого уровня запишутся одни и те же ответы и src\n    let tempArr = [];\n    // заполняем массив вопросам ссылками на аудиофайлы\n    questionIndexes.forEach((currentSrc) => {\n      tempArr.push(staticData[currentSrc].src);\n    });\n\n    question.srcs = Object.assign([], tempArr);\n    tempArr = [];\n\n    // заполняем массив ответов\n    answerIndexes.forEach((currentAnswer) => {\n      const answer = Object.assign({}, answerTemplate);\n\n      answer.artist = staticData[currentAnswer].artist;\n      answer.name = staticData[currentAnswer].name;\n      answer.img = staticData[currentAnswer].image;\n      answer.src = staticData[currentAnswer].src;\n      answer.isCorrect = questionIndexes.has(currentAnswer);\n\n      tempArr.push(answer);\n    });\n\n    question.answers = tempArr;\n\n    // сохраняем данные по вопросам/ответам по каждому уровню в общий массив\n    gameQuestions.push(question);\n  });\n\n  return gameQuestions;\n}\n","/**\n * Модуль содержит функции для предзагрузки данных для игры\n * Не используется FETCH, поскольку политика сайтов ресурсов не дает загрузить без {mode: 'no-cors'}\n * А FETCH с {mode: 'no-cors'} не дает получить доступ к Response и телу ответа,\n * т.е. нельзя проверть успешность загрузки ресурсов\n */\n\n/**\n * Функция получения URL-адресов предзагружаемых файлов изображения и музыки,\n * которые используются в вопросах на игровых уровнях\n * @param {object} questions - объект, с вопросами к игре, содержащий  URL-ссылки о необходимых файла для игры\n * @return {object} - объект вида {audio: [], image: []} содержащий перечень URL-ссылок на файлы музыки и картинок\n */\nfunction getResourceUrls(questions) {\n  const audioUrls = new Set();\n  const imgUrls = new Set();\n\n  questions.forEach((question) => {\n    question.srcs.forEach((src) => audioUrls.add(src));\n    question.answers.forEach((answer) => {\n      audioUrls.add(answer.src);\n      imgUrls.add(answer.img);\n    });\n  });\n\n  const urls = {audio: [], image: []};\n  urls.audio = Array.from(audioUrls);\n  urls.image = Array.from(imgUrls);\n\n  return urls;\n}\n\n/**\n * Функция загрузки всех файлов одного типа (картинки, музыка) на которые полученны ссылки URL\n * @param {function} loadFileFunc - функция загрузки специфичная для заданного типа файлов функция\n * @param {array} urls - массив ссылок URL на файлы, которые нужно загрузить\n * @return {promise} - промис, который завершается после загрузки всех файлов\n */\nfunction getFiles(loadFileFunc, urls) {\n  const requests = urls.map((url) => loadFileFunc(url));\n\n  return Promise.all(requests);\n}\n\n/**\n * Функция загрузки для файлов с типом \"Аудио\"\n * @param {string} url - URL-адрес аудиофайла, который нужно загрузить\n * @return {promise} - промис, который завершается после загрузки файла\n */\nfunction getAudioFile(url) {\n  return new Promise(function (resolve, reject) {\n    const audioElement = new Audio();\n    audioElement.addEventListener('canplaythrough', resolve, false);\n    audioElement.addEventListener('error', reject, false);\n    audioElement.src = url;\n  });\n}\n\n/**\n * Функция загрузки для файлов с типом \"Картинка\"\n * @param {string} url - URL-адрес картинки, которую нужно загрузить\n * @return {promise} - промис, который завершается после загрузки файла\n */\nfunction getImageFile(url) {\n  return new Promise(function (resolve, reject) {\n    const imgElement = new Image();\n    imgElement.addEventListener('load', resolve, false);\n    imgElement.addEventListener('error', reject, false);\n    imgElement.src = url;\n  });\n}\n\n\n/**\n * Общая функция, которая отвечает за предзагрузку ресурсов для игры\n * @param {object} gameData - объект с данными о ресурсах, которые нужно загрузить. Содержит в т.ч. ссылки URL на файлы.\n * @return {array} - массив результатов предзагрузки\n */\nexport default async function preloadResource(gameData) {\n  const resourceUrls = getResourceUrls(gameData);\n\n  await getFiles(getImageFile, resourceUrls.image);\n  await getFiles(getAudioFile, resourceUrls.audio);\n}\n\n","/**\n * Модуль содержит абстрактный класс AbstractView\n * Который описывает базовый функциона для всех модулей представления\n * Должен расширяться конкретными представлениями\n */\n\nexport default class AbstractView {\n\n  /**\n   * Абстрактный метод возвращающий строку с разметкой предстваления\n   * В конкретных представлениях должен быть переопределен\n   */\n  get _template() {\n    throw new Error('Абстрактный метод возвращающий строку с разметкой представления.');\n  }\n\n  /**\n   * Метод, возвращающий DOM-элемент представления\n   * Сгенерированный на основе шаблона с навешенными обработчиками событий\n   * @return {object} - DOM-элемент, сгенерированный на основе шаблона с навешенными обработчиками событий\n   */\n  get element() {\n\n    // при повторном запросе возвращает ранее сгенерированный элемент\n    if (this._element) {\n      return this._element;\n    }\n\n    let container = this._render(this._template);\n    container = this._bind(container);\n    // используется firstElementChild чтобы \"вынять\" дочерний элементы из контейнера DIV\n    // т.к. метод render возвращает элементы на основе шаблона внутри временного элемента DIV\n    // и если DIV с сгенерированным содержимым вставлять в разметку как есть, то может сломаться верстка\n    this._element = container.firstElementChild;\n\n    return this._element;\n  }\n\n  /**\n   * Метод, создающий DOM-элемент на основе строки-шаблона\n   * @param {string} template - строка, содержащая HTML-разметку элемента\n   * @return {object} - DOM-элемент, сгенерированный на основе шаблона\n   */\n  _render(template) {\n    const container = document.createElement('div');\n    container.innerHTML = template;\n\n    return container;\n  }\n\n  /**\n   * Метод, навешивающий обработчики событий на DOM-элементы, содержащиеся внутри переденного контейнера\n   * По-умолчанию обработчиков не добавляет. При необходимости должен быть переопределен в наследниках для конкретных представлений.\n   * @param {object} container - общий контейнер, содержащий DOM-элементы представления к которым нужно добавить обработчики\n   * @return {object} - контейнер с DOM-элементами, на которые, при необходимости, добавлены обработчики\n   */\n  _bind(container) {\n    return container;\n  }\n}\n","/**\n * Модуль содержит класс StartScreenView\n * Который содержит представление для стартового экрана игры\n */\n\nimport AbstractView from './abstract-view.js';\n\n// шаблон стартового окна игры\nconst startScreenTemplate = `<section class=\"welcome\">\n    <div class=\"welcome__logo\"><img src=\"img/melody-logo.png\" alt=\"Угадай мелодию\" width=\"186\" height=\"83\"></div>\n    <button class=\"welcome__button\"><span class=\"visually-hidden\">Начать игру</span></button>\n    <h2 class=\"welcome__rules-title\">Правила игры</h2>\n    <p class=\"welcome__text\">Правила просты:</p>\n    <ul class=\"welcome__rules-list\">\n      <li>За 5 минут нужно ответить на все вопросы.</li>\n      <li>Можно допустить 3 ошибки.</li>\n    </ul>\n    <p class=\"welcome__text\">Удачи!</p>\n  </section>`;\n\nexport default class StartScreenView extends AbstractView {\n\n  /**\n   * Обработчик клика на кнопку старта игры\n   * Пустой, должен быть определен для обработки события старта игры\n   */\n  // eslint-disable-next-line no-empty-function\n  onStartBtnClick() {\n  }\n\n  /**\n   * Переопределение абстрактного метода родителя\n   * Возвращает строку с шаблоном разметки стартового окна\n   */\n  get _template() {\n    return startScreenTemplate;\n  }\n\n  /**\n   * Переопределение метода родителя\n   * Навешивает соответствующие обработчики на шаблон стартового окна\n   * @param {object} container - DOM-элемент, содержащий разметку игрового окна\n   * @return {object} - тот же DOM-элемент, к которому навешены нужные обработчики событий\n   */\n  _bind(container) {\n    const playBtn = container.querySelector('.welcome__button');\n\n    // при клике на кнопку \"Играть\" показать первый экран игры\n    playBtn.addEventListener('click', (evt) => {\n      evt.preventDefault();\n      this.onStartBtnClick();\n    });\n\n    return container;\n  }\n}\n","/**\n * Модуль содержит класс StartScreen\n * Который выполняет роль контроллера для представления стартового экрана\n */\nimport StartScreenView from '../views/start-screen-view.js';\nimport Application from '../application.js';\n\nexport default class StartScreen {\n\n  constructor() {\n    this._screenView = new StartScreenView();\n    this._screenView.onStartBtnClick = Application.showGameLevel;\n    this.element = this._screenView.element;\n  }\n\n}\n","/**\n * Модуль содержит класс LevelHeaderScreenView\n * Который содержит представление для шапки экрака игрового уровня\n */\n\nimport AbstractView from './abstract-view.js';\nimport {GAME_PARAM} from '../data/config.js';\nimport {getTimeComponents, getTimeAnimationRadius} from '../utilities.js';\n\nconst LOW_TIME_CLASS = 'timer__value--finished';\n\n// шаблон разметки шапки игровых уровней\nconst headerTemplate = (state) => {\n  const {minuts, seconds} = getTimeComponents(state.currentTime);\n\n  return `<header class=\"game__header\">\n      <a class=\"game__back\" href=\"#\">\n        <span class=\"visually-hidden\">Сыграть ещё раз</span>\n        <img class=\"game__logo\" src=\"/img/melody-logo-ginger.png\" alt=\"Угадай мелодию\">\n      </a>\n\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"timer\" viewBox=\"0 0 780 780\">\n        <circle class=\"timer__line\" cx=\"390\" cy=\"390\" r=\"370\" style=\"filter: url(.#blur); transform: rotate(-90deg) scaleY(-1); transform-origin: center\">\n      </svg>\n\n      <div class=\"timer__value\" xmlns=\"http://www.w3.org/1999/xhtml\">\n        <span class=\"timer__mins\">${minuts}</span>\n        <span class=\"timer__dots\">:</span>\n        <span class=\"timer__secs\">${seconds}</span>\n      </div>\n\n      <div class=\"game__mistakes\">\n        ${new Array(state.wrong + 1).join('<div class=\"wrong\"></div>')}\n      </div>\n    </header>`;\n};\n\n\nexport default class LevelHeaderScreenView extends AbstractView {\n\n  constructor(gameState) {\n    super();\n    this.gameState = gameState;\n  }\n\n  /**\n   * Обработчик клика на кнопку начала игры заново\n   * Должен переопределен для правильной реакции на перезапуск игры\n   */\n  // eslint-disable-next-line no-empty-function\n  onBackBtnClick() {\n  }\n\n  /**\n   * Отдельный метод для обновления значения оставшегося времени игры\n   * @param {object} state - объект состояния игры\n   */\n  updateTime(state) {\n    const timerRootElement = this.element.querySelector('.timer__value');\n    const timeMinutsElement = this.element.querySelector('.timer__mins');\n    const timeSecondsElement = this.element.querySelector('.timer__secs');\n\n    if (state.currentTime <= GAME_PARAM.lowTime && !timerRootElement.classList.contains(LOW_TIME_CLASS)) {\n      timerRootElement.classList.add(LOW_TIME_CLASS);\n    }\n\n    // получаем компоненты времени\n    const {minuts, seconds} = getTimeComponents(state.currentTime);\n    // меняем содержимое элементов\n    timeMinutsElement.textContent = minuts;\n    timeSecondsElement.textContent = seconds;\n\n    // обновляем состояние анимационного круга оставшегося времени\n    this._updateTimeCircle(state.totalTime, state.currentTime);\n  }\n\n  /**\n   * Переопределение абстрактного метода родителя\n   * Возвращает строку с шаблоном разметки шапки окна игрового уровня\n   * В зависимости от текущего состояния игры\n   */\n  get _template() {\n    return headerTemplate(this.gameState);\n  }\n\n  /**\n   * Переопределение метода родителя\n   * Навешивает соответствующие обработчики на шаблон шапки игрового окна\n   * @param {object} container - DOM-элемент, содержащий разметку игрового окна\n   * @return {object} - тот же DOM-элемент, к которому навешены нужные обработчики событий\n   */\n  _bind(container) {\n    const backBtn = container.querySelector('.game__back');\n\n    // обработчик перезапуска игры\n    backBtn.addEventListener('click', (evt) => {\n      evt.preventDefault();\n      this.onBackBtnClick();\n    });\n\n    return container;\n  }\n\n  /**\n   * Метод обновления анимационного круга, иллюстирующего колличество оставшегося времени\n   * @param {number} totalTime - общее колличество игрового времени (сколько всего доступно для игры)\n   * @param {number} currentTime - текущее значение игрового времени\n   */\n  _updateTimeCircle(totalTime, currentTime) {\n    const timeCircleElement = this.element.querySelector('.timer__line');\n    // находим значение длинны анимационной окружности\n    const circleLength = Math.ceil(2 * Math.PI * timeCircleElement.getAttribute('r'));\n    // значения для установки стилей в SVG-элементе окружности\n    const {stroke, offset} = getTimeAnimationRadius(currentTime / totalTime, circleLength);\n\n    timeCircleElement.style.strokeDasharray = `${stroke}px`;\n    timeCircleElement.style.strokeDashoffset = `${offset}px`;\n  }\n}\n","/**\n * Модуль содержит функционал по инициализации элементов управления тегами <audio>,\n * которые отвечают за воспроизведение аудиотреков в уровнях игры\n */\n\n// классы для поиска и изменения состояния кнопками управления аудиотреками\nconst CONTROL_BTN_CLASS = 'track__button';\nconst PLAY_CLASS = 'track__button--play';\nconst PAUSE_CLASS = 'track__button--pause';\n\nexport default class TrackContoller {\n\n  constructor(container) {\n    // находим элементы управления и теги <audio> соответствующие элементам управления\n    this.controlBtns = Array.from(container.querySelectorAll(`.${CONTROL_BTN_CLASS}`));\n    this.audioElements = this.controlBtns.map((controlBtn) => controlBtn.parentElement.querySelector('audio'));\n\n    // карта сопоставления элементов управления тегам <audio>\n    this._controlToAudioElement = new Map();\n    this.controlBtns.forEach((controlBtn, index) => this._controlToAudioElement.set(controlBtn, this.audioElements[index]));\n\n    // хранит значения предудущих элементов и аудиотреков\n    // для поочередного включения только одного трека\n    this._prevControlBtn = null;\n    this._prevAudioElement = null;\n\n    // всем кнопкам упрвления добавляем обработчики нажатия на них\n    this.controlBtns.forEach((controlBtn) => controlBtn.addEventListener('click', (evt) => {\n      evt.preventDefault();\n      this._onControlBtnClick(evt.target);\n    }));\n\n    // всем аудио-элементам добавляем обработчики окончания воспроизведения трека\n    this.audioElements.forEach((audioElement) => audioElement.addEventListener('ended', (evt) => {\n      this._onAudioTrackEnd(evt.target);\n    }));\n  }\n\n  /**\n   * Обработчик клика на кнопке управления воспроизведением треков\n   * Запускает/останавливает воспроизведение аудиотреков, меняе вид кнопкок управления воспроизведением\n   * Контролирует, чтобы одновременно не играло больше 1 трека\n   * @param {object} target - объект, на котором перехвачен клик\n   */\n  _onControlBtnClick(target) {\n    // для BUTTON используем CLOSEST, т.к. клик может быть внутри BUTTON на другом элементе и тогда будет неправильный target\n    const currentControlBtn = target.closest(`.${CONTROL_BTN_CLASS}`);\n    const currentAudioElement = this._controlToAudioElement.get(currentControlBtn);\n\n    // при первоначальной загрузке страницы определить значение для предыдущего воспроизводимого трека\n    if (!this._prevControlBtn) {\n      this._prevControlBtn = this.controlBtns.find((controlBtn) => controlBtn.classList.contains(PAUSE_CLASS));\n      this._prevAudioElement = this._controlToAudioElement.get(this._prevControlBtn);\n    }\n\n    // если клик по кнопке управления, которая соответствует воспроизведению другого трека\n    // остановить проигрывание предыдущего трека\n    // чтобы одновременно не играло больше 1 трека\n    if (this._prevControlBtn && this._prevControlBtn !== currentControlBtn && this._prevControlBtn.classList.contains(PAUSE_CLASS)) {\n      this._pauseTrack(this._prevControlBtn, this._prevAudioElement);\n    }\n\n    // сохранить новое значение для элемента управления и аудиотрека\n    [this._prevControlBtn, this._prevAudioElement] = [currentControlBtn, currentAudioElement];\n\n    // если кнопка управления в виде \"паузы\", остановить воспроизведение\n    // иначе, запустить проигрывание трека\n    if (currentControlBtn.classList.contains(PAUSE_CLASS)) {\n      this._pauseTrack(currentControlBtn, currentAudioElement);\n    } else {\n      this._playTrack(currentControlBtn, currentAudioElement);\n    }\n  }\n\n  /**\n   * Обработчик события окончания воспроизведения аудиотрека\n   * При окончании проигрывание меняет состояние соответствующей кнопки управления\n   * @param {object} target - объект адудиотрека, на котором произошло событие окончания воспроизведения\n   */\n  _onAudioTrackEnd(target) {\n    const currentAudioElement = target;\n    const currentControlBtn = this.controlBtns[this.audioElements.indexOf(currentAudioElement)];\n\n    if (currentControlBtn && currentControlBtn.classList.contains(PAUSE_CLASS)) {\n      this._pauseTrack(currentControlBtn, currentAudioElement);\n    }\n  }\n\n  /**\n   * Функция воспроизведения аудиотрека\n   * При запуске трека меняет состояние соответствующей кнопки управления\n   * И запускает соответствующий кнопке аудиотрек на воспроизведение\n   * @param {object} controlBtn - ссылка на кнопку управления, которой запускаетсся воспроизведение\n   * @param {object} audioElement - ссылка на DOM-элемент аудиотега <audio>\n   */\n  _playTrack(controlBtn, audioElement) {\n    controlBtn.classList.remove(PLAY_CLASS);\n    controlBtn.classList.add(PAUSE_CLASS);\n\n    audioElement.play();\n  }\n\n  /**\n   * Функция остановки воспроизведения аудиотрека\n   * При окончании проигрывания меняет состояние соответствующей кнопки управления\n   * И останавливает воспроизведение соответствующего кнопке аудиотрека\n   * @param {object} controlBtn - ссылка на кнопку управления, которой останавливается воспроизведение\n   * @param {object} audioElement - ссылка на DOM-элемент аудиотега <audio>\n   */\n  _pauseTrack(controlBtn, audioElement) {\n    controlBtn.classList.remove(PAUSE_CLASS);\n    controlBtn.classList.add(PLAY_CLASS);\n\n    audioElement.pause();\n  }\n\n}\n","/**\n * Модуль содержит класс LevelScreenView\n * Который содержит представление для экранов уровней игры\n */\n\nimport AbstractView from './abstract-view.js';\nimport TrackContoller from '../process/tracks-controller.js';\n\nimport {DEBUG_MODE} from '../data/config.js';\n\nconst DEBUG_STYLE = 'outline: 2px solid red';\n\n// шаблон разметки игрового уровня на выбор Артиста по аудиотреку\nconst selectArtistTemplate = (question) => `<section class=\"game game--artist\">\n  <section class=\"game__screen\">\n    <h2 class=\"game__title\">${question.title}</h2>\n    <div class=\"game__track\">\n      <button class=\"track__button track__button--pause\" type=\"button\"></button>\n      <audio src=${question.srcs[0]} autoplay></audio>\n    </div>\n    <form class=\"game__artist\">\n\n    ${question.answers.map((answer, index) =>\n    `<div class=\"artist\">\n      <input class=\"artist__input visually-hidden\" type=\"radio\" name=\"answer\" value=\"${answer.artist}\" id=\"answer-${index + 1}\">\n      <label class=\"artist__name\" for=\"answer-${index + 1}\">\n        <img class=\"artist__picture\" src=\"${answer.img}\" alt=\"${answer.artist}\" style=\"${(answer.isCorrect && DEBUG_MODE) ? DEBUG_STYLE : ''}\">\n        ${answer.artist}\n      </label>\n    </div>`\n  ).join('')}\n\n    </form>\n  </section>\n</section>`;\n\n// шаблон разметки игрового уровня на выбор Жанра аудиотреков\nconst selectGenreTemplate = (question) => `<section class=\"game game--artist\">\n  <section class=\"game__screen\">\n    <h2 class=\"game__title\">${question.title}</h2>\n    <form class=\"game__tracks\">\n\n      ${question.answers.map((answer, index) =>\n    `<div class=\"track\">\n      <button class=\"track__button ${index === 0 ? 'track__button--pause' : 'track__button--play'}\" type=\"button\"></button>\n      <div class=\"track__status\">\n        <audio src=${answer.src} ${index === 0 ? 'autoplay' : ''}></audio>\n      </div>\n      <div class=\"game__answer\" style=\"${(answer.isCorrect && DEBUG_MODE) ? DEBUG_STYLE : ''}\">\n        <input class=\"game__input visually-hidden\" type=\"checkbox\" name=\"answer\" value=\"${answer.artist}\" id=\"answer-${index + 1}\">\n        <label class=\"game__check\" for=\"answer-${index + 1}\">Отметить</label>\n      </div>\n    </div>`).join('')}\n\n      <button class=\"game__submit button\" type=\"submit\" disabled>Ответить</button>\n    </form>\n  </section>\n</section>`;\n\nexport default class LevelScreenView extends AbstractView {\n\n  constructor(levelQuestion) {\n    super();\n    this.levelQuestion = levelQuestion;\n\n    this.trackController = new TrackContoller(this.element);\n\n    // содержит признак выбора одного из ответов\n    // по нему разрешается переход на следующий уровень игры\n    this._isAnswerSelected = false;\n  }\n\n  /**\n   * Возвращает массив булевых значений, которые указывают был ли выбран соответствующий по порядку ответ из предоставленных вариантов\n   * @return {array} - массив булевых значений, где каждому из вариантов ответов по порядку устанавливается признак был ли он выбран пользователем\n   */\n  get answersSelected() {\n    return this._answerBtns.map((btn) => btn.checked);\n  }\n\n  /**\n   * Переопределение абстрактного метода родителя\n   * Возвращает строку с шаблоном разметки окна игрового уровня\n   * В зависимости от типа вопросов на уровне (на выбор Артиста или Жанра)\n   */\n  get _template() {\n    // по типу полученных вопросов выбрать соответствующий шаблон разметки\n    return (this.levelQuestion.type === 'artist') ? selectArtistTemplate(this.levelQuestion) : selectGenreTemplate(this.levelQuestion);\n  }\n\n  /**\n   * Обработчик выбора ответа и переходна на следующий уровень\n   * Должен быть переопределен для правильной реакции на переход на следующий уровень\n   */\n  // eslint-disable-next-line no-empty-function\n  onAnswerSubmit() {\n  }\n\n  /**\n   * Переопределение метода родителя\n   * Навешивает соответствующие обработчики на шаблон игрового окна\n   * @param {object} container - DOM-элемент, содержащий разметку игрового окна\n   * @return {object} - тот же DOM-элемент, к которому навешены нужные обработчики событий\n   */\n  _bind(container) {\n    // в зависимости от типа вопросов, навешиваем обработчик для тела игрового окна\n    return (this.levelQuestion.type === 'artist') ? this._bindScreenSelectArtist(container) : this._bindScreenSelectGenre(container);\n  }\n\n  /**\n   * Метод инициализации DOM-элементов уровня игрового окна на выбор Артиста\n   * @param {object} container - DOM-элемент контейнер, содержащий DOM разметку, сгенерированную на основе шаблона\n   * @return {object} - DOM-элемент контейнер с разметкой игрового окна, над которым выполнена инциализация (добавлены обработчики событий)\n   */\n  _bindScreenSelectArtist(container) {\n    const form = container.querySelector('.game__artist');\n    this._answerBtns = [...container.querySelectorAll('.artist__input')];\n\n    // обработчик клика на кнопку с одним из вариантов ответа\n    form.addEventListener('click', (evt) => {\n      // если клик не по одной из кнопок выбора песни ничего не делаем\n      if (!this._answerBtns.includes(evt.target)) {\n        return;\n      }\n\n      // устанавливаем признак, что был выбран ответ\n      // для того, чтобы разрешить обработку подтверждения ответа\n      this._isAnswerSelected = true;\n\n      // при клике на любую из кнопок вариантов ответов, выбор ответа подтверждается автоматически\n      this.onAnswerSubmit();\n    });\n\n    // обработчик подтверждения ответа\n    form.addEventListener('submit', (evt) => {\n      this._onFormSubmit(evt);\n    });\n\n    return container;\n  }\n\n  /**\n   * Функция инициализации DOM-элементов уровня игрового окна на выбор Жанра\n   * @param {object} container - DOM-элемент контейнер, содержащий DOM разметку, сгенерированную на основе шаблона\n   * @return {object} - DOM-элемент контейнер с разметкой игрового окна, над которым выполнена инциализация (добавлены обработчики событий)\n   */\n  _bindScreenSelectGenre(container) {\n    const form = container.querySelector('.game__tracks');\n    const btnSubmit = container.querySelector('.game__submit');\n    this._answerBtns = [...container.querySelectorAll('.game__input')];\n\n    // обработчик по клику на одну из кнопок выбора песни\n    form.addEventListener('click', (evt) => {\n      // если клик не по одной из кнопок выбора песни ничего не делаем\n      if (!this._answerBtns.includes(evt.target)) {\n        return;\n      }\n\n      // устанавливаем признак, выбран ли хоть один ответ\n      this._isAnswerSelected = !!this.answersSelected.find((select) => select === true);\n\n      // разрешаем нажать кнопку \"Ответ\" если выбран хотя бы один из ответов\n      btnSubmit.disabled = !this._isAnswerSelected;\n    });\n\n    form.addEventListener('submit', (evt) => {\n      this._onFormSubmit(evt);\n    });\n\n    return container;\n  }\n\n  _onFormSubmit(evt) {\n    evt.preventDefault();\n\n    // ответ подтверждается, если выбран хотябы один из вариантов ответа\n    if (this._isAnswerSelected) {\n      this.onAnswerSubmit();\n    }\n  }\n}\n","/**\n * Модуль содержит класс ModalConfirmView\n * Который содержит представление для стартового экрана игры\n */\n\nimport AbstractView from './abstract-view.js';\n\n// шаблон окна\nconst modalTemplate = `<div class=\"modal__overlay\">\n    <section class=\"modal\">\n      <button class=\"modal__close js-close-btn\" type=\"button\"><span class=\"visually-hidden\">Закрыть</span></button>\n      <h2 class=\"modal__title\">Подтверждение</h2>\n      <p class=\"modal__text\">Вы уверены что хотите начать игру заново?</p>\n      <div class=\"modal__buttons\">\n        <button class=\"modal__button button js-confirm-btn\">Ок</button>\n        <button class=\"modal__button button js-cancel-btn\">Отмена</button>\n      </div>\n    </section>\n  </div>`;\n\nexport default class ModalConfirmView extends AbstractView {\n  /**\n   * Обработчик клика на кнопку подтверждения выбора\n   * Пустой, должен быть определен для обработки события подтверждения выбора\n   */\n  // eslint-disable-next-line no-empty-function\n  onConfirm() {\n  }\n\n  /**\n   * Обработчик клика на кнопку отмены выбора\n   * Пустой, должен быть определен для обработки события отмены выбора\n   */\n  // eslint-disable-next-line no-empty-function\n  onCancel() {\n  }\n\n  /**\n   * Переопределение абстрактного метода родителя\n   * Возвращает строку с шаблоном разметки модального окна подтверждения выбора\n   */\n  get _template() {\n    return modalTemplate;\n  }\n\n  /**\n   * Переопределение метода родителя\n   * Навешивает соответствующие обработчики на шаблон модального окна подтверждения выбора\n   * @param {object} container - DOM-элемент, содержащий разметку модального окна подтверждения выбора\n   * @return {object} - тот же DOM-элемент, к которому навешены нужные обработчики событий\n   */\n  _bind(container) {\n    const confirmBtn = container.querySelector('.js-confirm-btn');\n    const cancelBtn = container.querySelector('.js-cancel-btn');\n    const closeBtn = container.querySelector('.js-close-btn');\n\n    const onCancelBtnClick = (evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.onCancel();\n    };\n\n    cancelBtn.addEventListener('click', onCancelBtnClick);\n    closeBtn.addEventListener('click', onCancelBtnClick);\n\n    confirmBtn.addEventListener('click', (evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.onConfirm();\n    });\n\n    return container;\n  }\n}\n","/**\n * Модуль содержит модель для использования на игровых уровнях\n */\nimport {INITIAL_STATE, GAME_DATA} from '../data/data.js';\n\nexport default class GameModel {\n\n  constructor() {\n    this.restart();\n  }\n\n  /**\n   * Возвращает объект состояния игры\n   * @return {object} - объект состояния игры\n   */\n  get state() {\n    return Object.freeze(Object.assign({}, this._state));\n  }\n\n  /**\n   * Возвращает объект с данными для текущего уровня игры\n   * @return {object} - объект с данными для текущего уровня игры\n   */\n  get currentLevel() {\n    return GAME_DATA.questions[this._state.level];\n  }\n\n  /**\n   * Сохраняет статистику ответов пользователя по пройденному уровню игры\n   * @param {object} levelStatistics - объект, содержащий выбранные ответы и время прохождения уровня игры\n     levelStatistics.answers - массив ответов\n     levelStatistics.time - время прохождения уровня\n   */\n  set statistics(levelStatistics) {\n    // на основе типовой структуры создаем объект с массивом ответов и временем прохождения игры\n    const result = {answers: [], time: 0};\n    result.answers.push(levelStatistics.answers);\n    result.time = levelStatistics.time;\n\n    // сохраняем статистику\n    this._state.statistics.push(result);\n  }\n\n  /**\n   * Инициализует начальное состояние игры\n   */\n  restart() {\n    this._state = Object.assign({}, INITIAL_STATE);\n    this._state.statistics = [];\n  }\n\n  /**\n   * Переключает номер игрового уровня\n   */\n  nextLevel() {\n    this._state.level++;\n  }\n\n  /**\n   * Проверяет, есть ли еще новые уровня игры\n   * @return {boolean} - true - еще есть следующий уровень, false - достигнут конец игры\n   */\n  hasNexLevel() {\n    return GAME_DATA.questions[this._state.level + 1] !== undefined;\n  }\n\n  /**\n   * Изменяет колличество ошибок, допущенных при ответах\n   */\n  die() {\n    this._state.wrong++;\n  }\n\n  /**\n   * Проверяет остались ли еще игровые жизни\n   * @return {boolean} - true - игровые жизни закончились, false - есть еще игровые жизни\n   */\n  isDie() {\n    return this._state.wrong > this._state.lives;\n  }\n\n  /**\n   * Изменяет колличество оставшегося игрового времени\n   */\n  tick() {\n    this._state.currentTime--;\n  }\n\n  /**\n   * Проверяет, не закончилось ли еще игровое время\n   * @return {boolean} - true - время еще не закончилось, false - время игры истекло\n   */\n  hasMoreTime() {\n    return this._state.currentTime > 0;\n  }\n}\n","/**\n * Модуль содержит презентер игрового уровня\n * Связывает игровую модель и отображение игрового уровня\n */\nimport LevelHeaderScreenView from '../views/level-header-screen-view.js';\nimport LevelScreenView from '../views/level-screen-view.js';\nimport ModalConfirmView from '../views/modal-confirm-view.js';\n\nimport GameModel from '../models/game-model.js';\nimport Application from '../application.js';\n\nimport {GAME_PARAM} from '../data/config.js';\nimport {showScreen} from '../utilities.js';\nimport {startNewGame, hasWrongAnswer, getSelectedAnswers} from '../process/process.js';\n\nexport default class LevelScreen {\n\n  constructor() {\n    this.model = new GameModel();\n    // создать презентер связывающий модель и представление\n    this._createController(this.model);\n  }\n\n  tick() {\n    this.timerID = setTimeout(() => {\n      this.model.tick();\n\n      if (!this.model.hasMoreTime()) {\n        this.stopTimer();\n        // console.log('No more time line');\n        // console.log(this.model.state);\n        Application.showStatistics(this.model);\n        return;\n      }\n\n      this.viewHeader.updateTime(this.model.state);\n\n      this.tick();\n    }, GAME_PARAM.timeTick);\n  }\n\n  stopTimer() {\n    // останавливаем таймер\n    clearTimeout(this.timerID);\n    // сохраняем значение времени в конце уровня\n    this._levelEndTime = this.model.state.currentTime;\n  }\n\n  nextLevel() {\n    this.stopTimer();\n    // сохранить статистику ответов по уровню\n    const selectedAnswers = getSelectedAnswers(this.viewBody.answersSelected, this.model.currentLevel.answers);\n    this.model.statistics = {answers: selectedAnswers, time: (this._levelStartTime - this._levelEndTime)};\n\n    // если допущены ошибки в ответах, забрать игровую жизнь\n    if (hasWrongAnswer(this.viewBody.answersSelected, this.model.currentLevel.answers)) {\n      this.model.die();\n    }\n    // если игра закончилась успешно либо не успешно\n    // показать экран статистики\n    if (this._checkGameEnd()) {\n      // console.log('All check line');\n      // console.log(this.model.state);\n      Application.showStatistics(this.model);\n      return;\n    }\n    // иначе увеличить номер уровня игры\n    this.model.nextLevel();\n    // создать и отобразить экран нового уровня\n    this._createController(this.model);\n    showScreen(this.element);\n  }\n\n  _createController(model) {\n    this.viewBody = new LevelScreenView(model.currentLevel);\n    // при ответе на текущие вопросы, переключаемся на следующий уровень\n    this.viewBody.onAnswerSubmit = () => this.nextLevel();\n    this.element = this.viewBody.element;\n    this._updateHeader();\n\n    // сохраняем значение времени в начале уровня\n    this._levelStartTime = model.state.currentTime;\n    // запустить отсчет времени\n    this.tick();\n  }\n\n  _updateHeader() {\n    if (this.headerElement) {\n      this.headerElement.remove();\n    }\n\n    this.viewHeader = new LevelHeaderScreenView(this.model.state);\n    this.viewHeader.updateTime(this.model.state);\n    this.viewHeader.onBackBtnClick = () => this._showModalConfirm();\n\n    this.headerElement = this.viewHeader.element;\n    this.element.prepend(this.headerElement);\n  }\n\n  _checkGameEnd() {\n    return !this.model.hasNexLevel() || this.model.isDie() || !this.model.hasMoreTime();\n  }\n\n  _showModalConfirm() {\n    this.modalConfirmView = new ModalConfirmView();\n    this.modalConfirmView.onCancel = () => this.modalConfirmView.element.remove();\n    this.modalConfirmView.onConfirm = () => startNewGame();\n    showScreen(this.modalConfirmView.element, false);\n  }\n}\n","/**\n * Модуль содержит функции управления игровы процессом\n */\nimport {GAME_DATA} from '../data/data.js';\nimport {loadQuestions} from '../network/server-communication.js';\nimport preloadResource from '../network/resouce-preloader.js';\n\nimport Application from '../application.js';\nimport ModalLoadAnimationView from '../views/modal-load-animatin-view.js';\nimport ModalErrorView from '../views/modal-error-view.js';\nimport {showScreen, createAppId} from '../utilities.js';\n\n/**\n * Сравнивает выбранные пользователем ответы с доступными вариантами ответов на текущем уровне игры\n * Возвращает результат, была ли ошибка при ответах\n * @param {array} selectedAnswers - массив boolean значений, где true - варианта ответа был выбран пользователем\n * @param {array} levelAnswers - варианты ответов, которые были доспупны на текущем уровне\n * @return {boolean} - true - ответы содержат неправильные варианты, false - все ответы правильные\n */\nexport function hasWrongAnswer(selectedAnswers, levelAnswers) {\n  // ищет первый правильный варинат ответа, который не был выбран пользователем\n  const wrongAnswer = levelAnswers.find((levelAnswer, index) => levelAnswer.isCorrect !== selectedAnswers[index]);\n\n  return wrongAnswer !== undefined;\n}\n\n/**\n * Функция сопоставляет ответы выбранные пользователем со всеми вариантами доступных ответов\n * И из всех доступных варинатов возвращает только те, что выбрал пользователь\n * @param {array} selectedAnswers - массив boolean значений, где true - варианта ответа был выбран пользователем\n * @param {array} levelAnswers - варианты ответов, которые были доспупны на текущем уровне\n * @return {array} - массив ответов, которые были выбраны пользователем\n */\nexport function getSelectedAnswers(selectedAnswers, levelAnswers) {\n  return levelAnswers.filter((_, index) => selectedAnswers[index]);\n}\n\n/**\n * Функция старта новой игры\n * Скачивает и предзагружает ресурсы для игры\n * В случае успешной загрузки с сервера - показывает стартовое окно\n * В случае ошибок взаимодействия по сети - окно ошибки\n */\nexport function startNewGame() {\n  // представление модального окна анимации загрузки ресурсов\n  const loadAnimationElement = new ModalLoadAnimationView().element;\n  showScreen(loadAnimationElement, false);\n\n  // предзагрузка ресуров для игры:\n  // 1. Загрузка вопросов\n  loadQuestions()\n  .then((questions) => {\n    GAME_DATA.questions = questions;\n    GAME_DATA.appId = createAppId();\n    return questions;\n  })\n  // 2. Предзагрузка аудиофайлов и картинок\n  .then((questions) => preloadResource(questions))\n  // в любом случае убираем анимацию процесса загрузки\n  .finally(() => loadAnimationElement.remove())\n  // при успешной загрузке стартуем игру\n  .then(() => Application.showStart())\n  // в случае ошибок, игру не стартуем, а показываем экран ошибки\n  .catch(() => showScreen(new ModalErrorView().element, false));\n}\n","/**\n * Модуль содержит класс ResultScreenView\n * Который содержит представление для стартового экрана игры\n */\n\nimport AbstractView from './abstract-view.js';\n\n// Общий шаблон разметки окна с результатом игры\nconst resultScreenTemplate = (message) => `<section class=\"result\">\n    <div class=\"result__logo\"><img src=\"img/melody-logo.png\" alt=\"Угадай мелодию\" width=\"186\" height=\"83\"></div>\n    ${message}\n    <button class=\"result__replay\" type=\"button\">Попробовать ещё раз</button>\n  </section>`;\n\n\nexport default class ResultScreenView extends AbstractView {\n\n  constructor(gameEndMessage) {\n    super();\n    this.message = gameEndMessage;\n  }\n\n  /**\n   * Обработчик клика на кнопку перезапуска игры\n   * Пустой, должен быть определен для обработки события перезапуска игры\n   */\n  // eslint-disable-next-line no-empty-function\n  onRestartGame() {\n  }\n\n  /**\n   * Переопределение абстрактного метода родителя\n   * Возвращает строку с шаблоном разметки окна результата игры\n   */\n  get _template() {\n    return resultScreenTemplate(this.message);\n  }\n\n  /**\n   * Переопределение метода родителя\n   * Навешивает соответствующие обработчики на шаблон окна результатов игры\n   * @param {object} container - DOM-элемент, содержащий разметку игрового окна\n   * @return {object} - тот же DOM-элемент, к которому навешены нужные обработчики событий\n   */\n  _bind(container) {\n    // добавить обработчик рестарта игры\n    const replayBtn = container.querySelector('.result__replay');\n    replayBtn.addEventListener('click', (evt) => {\n      evt.preventDefault();\n      this.onRestartGame();\n    });\n\n    return container;\n  }\n}\n","/**\n * Модуль содержит класс ModalLoadAnimationView\n * Который содержит представление для стартового экрана игры\n */\n\nimport AbstractView from './abstract-view.js';\n\n// шаблон окна\nconst modalTemplate = (message) => `<div id=\"preload-spinner\" class=\"spinner\">${message}</div>`;\n\nexport default class ModalLoadAnimationView extends AbstractView {\n\n  constructor(message = 'Синхронизация<br>данных!') {\n    super();\n    this.message = message;\n  }\n\n  /**\n   * Переопределение абстрактного метода родителя\n   * Возвращает строку с шаблоном разметки модального окна ошибки\n   */\n  get _template() {\n    return modalTemplate(this.message);\n  }\n}\n","/**\n * Модуль содержит функции подсчета статистики результатов игры\n */\nimport {GAME_PARAM} from '../data/config.js';\nimport {getTimeComponents, wordFrom} from '../utilities.js';\n\n/**\n * Функция возвращает сообщение с результатом игры пользователем\n * При выиграше рассчитывает рейтинг пользователя в общем массиве результатов игр других пользователей\n * Сообщение используется для отображения результатов игры на финальном экране\n * @param {object} endFlags - объект, содержащий код статуса окончания игры\n    endFlags.isDie - true - превышено число допустимых ошибок при ответах\n    endFlags.overTime - true - истекло общее время игры\n * @param {object} state - объект состояния игры\n    state.totalTime - общее время длительности игры,\n    state.currentTime - текущее оставшееся время игры,\n    state.wrong - количество допущенных ошибок при ответах\n * @param {array} results - массив с результатами игор всех пользователей\n * @param {object} userResult - объект с результатом игры текущего пользователя\n   userResult.ball - количество набраных очков\n   userResult.quickAnswer - колличество быстрых ответов\n * @return {string} - сообщение с результатом игры\n */\nexport function getResultMessage(endFlags, state, results, userResult) {\n\n  if (endFlags.isDie) {\n    return `<h2 class=\"result__title\">Какая жалость!</h2>\n    <p class=\"result__total result__total--fail\">У вас закончились все попытки. Ничего, повезёт в следующий раз!</p>`;\n  }\n\n  if (endFlags.overTime) {\n    return `<h2 class=\"result__title\">Увы и ах!</h2>\n    <p class=\"result__total result__total--fail\">Время вышло! Вы не успели отгадать все мелодии</p>`;\n  }\n\n  // получаем оставшееся время и рейтинг пользователя\n  const {minuts, seconds} = getTimeComponents(state.totalTime - state.currentTime);\n  const {positionInRating, totalUsers, percentRating} = getResultPosition(results, userResult.ball);\n\n  // получаем строковое представление для статистики пользователя в виде:\n  // числовой результат + единицы измерения этого результата в виде текста соответствующего склонения\n  // например, 1 минута 25 секунд, 8 баллов 3 быстрых\n  const lastMinutesString = wordFrom(minuts, ['минуту', 'минуты', 'минут']);\n  const lastSecondsString = wordFrom(seconds, ['секунда', 'секунды', 'секунд']);\n  const ballString = wordFrom(userResult.ball, ['бал', 'балла', 'баллов']);\n  const quickAnswerString = wordFrom(userResult.quickAnswer, ['быстрый', 'быстрых', 'быстрых']);\n  const wrongAnswerString = wordFrom(state.wrong, ['ошибку', 'ошибки', 'ошибок']);\n\n  return `<h2 class=\"result__title\">Вы настоящий меломан!</h2>\n    <p class=\"result__total\">За ${lastMinutesString} и ${lastSecondsString} вы набрали ${ballString} (${quickAnswerString}), совершив ${wrongAnswerString}</p>\n    <p class=\"result__text\">Вы заняли ${positionInRating} место из ${totalUsers}. Это лучше чем у ${percentRating}% игроков</p>`;\n}\n\n/**\n * Функция подсчета набранных игроком баллов и колличества быстрых ответов\n * @param {array} answers - массив ответов и затраченного времени на каждый вопрос.\n *  Упорядочен последовательно по порядку уровней игры\n *  Каждый объект внутри массива содержит результат ответов пользователя на вопрос каждого уровня:\n *  [{[] - массив выбранных пользователем ответов, time: {number} - милисекунды затраченные на ответ)}]\n * @param {number} wrongAnswer - количество неправильных ответов\n * @param {number} totalQuestion - общее колличество вопросов\n * @return {object} - объект вида {quickAnswer, ball} с колличеством быстрых ответов и набраных баллов\n */\nexport function calcUserResult(answers, wrongAnswer, totalQuestion) {\n  // колличество быстрых ответов\n  const quickAnswer = answers.reduce((sum, answer) => sum + +isFastAnswer(answer.time), 0);\n\n  const ballQuickAnswer = quickAnswer * GAME_PARAM.quickRatio;\n  const ballCorrectAnswer = (totalQuestion - quickAnswer) * GAME_PARAM.correctRatio;\n  const ballWrongAnswer = wrongAnswer * GAME_PARAM.failRatio;\n  const totalBall = ballQuickAnswer + ballCorrectAnswer + ballWrongAnswer;\n\n  return {quickAnswer, ball: totalBall};\n}\n\n/**\n * Функция добавляет результат игры текущего пользователя в общий массив результатов других пользователей\n * @param {array} results - массив {number} набранных очков предыдущих игор\n * @param {number} userResult - колличество набранных очков текущим пользователем\n * @return {array} - обновленный массив с результатами игр всех пользователей\n */\nexport function updateRatings(results, userResult) {\n  // если результат пользователя уже есть в общем рейтинге\n  // рейтинг не обновляем\n  if (results.includes(userResult)) {\n    return results;\n  }\n\n  // иначе добавляем результат пользователя в общий рейтинг\n  const newRatings = [...results];\n  // находим позицию в которую нужно вставить новый результат\n  const indexInRating = (newRatings[newRatings.length - 1] < userResult) ?\n    newRatings.findIndex((element) => element < userResult) : newRatings.length;\n  // вставляем результат текущего пользователя в общий массив результатов\n  newRatings.splice(indexInRating, 0, userResult);\n\n  // возвращаем обновленный массив результатов рейтингов всех пользователей\n  return newRatings;\n}\n\n/**\n * Функция возвращает позицию результата игры текущего пользователя отосительно результатов других пользователей\n * @param {array} results - массив {number} набранных очков предыдущих игор\n * @param {number} userResult - колличество набранных очков текущим пользователем\n * @return {object} - объект с рейтинговыми показателями игры текущего пользователя:\n *  positionInRating - позиция результата игры текущего пользователя относительно результатов других пользователей\n *  totalUsers - общее колличество пользователей, попавших в рейтиги\n *  percentRating - то же что и positionInRating, но выраженное в процентах\n */\nexport function getResultPosition(results, userResult) {\n\n  const positionInRating = results.indexOf(userResult) + 1;\n\n  if (results.length === 0) {\n    return {positionInRating: 1, totalUsers: 1, percentRating: 100};\n  }\n\n  const totalUsers = results.length;\n  const percentRating = Math.round((totalUsers - positionInRating) / totalUsers * 100);\n\n  return {positionInRating, totalUsers, percentRating};\n}\n\n/**\n * Проверяет был ли ответ на вопросы уровня быстрым или медленным\n * Скорость ответа сравнивается с заданным параметров в игре\n * @param {number} levelTime - скорость ответа на вопрос на текущем уровен игры\n * @return {boolean} - true - ответ дан быстро, false - медленно\n */\nexport function isFastAnswer(levelTime) {\n  return levelTime < GAME_PARAM.limitTime;\n}\n","/**\n * Модуль содержит презентер финального окна результатов игры\n */\n\nimport ResultScreenView from '../views/result-screen-view.js';\nimport ModalLoadAnimationView from '../views/modal-load-animatin-view.js';\nimport Application from '../application.js';\n\nimport {showScreen} from '../utilities.js';\nimport {GAME_DATA} from '../data/data.js';\nimport {calcUserResult, getResultMessage, updateRatings} from '../process/statistics.js';\nimport {loadStatistics, sendStatistics} from '../network/server-communication.js';\n\nconst errorMessage = `<h2 class=\"result__title\">Ошибка синхронизации данных!</h2>\n    <p class=\"result__total result__total--fail\">Проверьте сетевое соединение и нажмите \"Попробовать ещё раз\"</p>`;\n\nclass ResultScreen {\n\n  constructor(model) {\n    // ссылка на модель игры, откуда берется статистика\n    this.model = model;\n  }\n\n  async createResultScreen() {\n    // хранит строку сообщения на финальном окне окончания игры\n    let message;\n\n    // если успешно закончена игра\n    if (!this.model.hasNexLevel() && !this.model.isDie() && this.model.hasMoreTime()) {\n      // попытаться синхронизировать статистику игры с сервером\n      try {\n        await this._dataSync();\n      } catch (err) { // в случае неудачной синхронизации создать сообщение об ошибке\n        message = errorMessage;\n      }\n    }\n\n    // если игра окончена успешно и выполнена сихронизация данных\n    // либо, если игра окончена неудачно\n    // сгенерировать отдельное сообщение для отображения на финальном окне\n    if (!message) {\n      message = getResultMessage(\n          {isDie: this.model.isDie(), overTime: !this.model.hasMoreTime()},\n          this.model.state,\n          GAME_DATA.statistics,\n          this._userResult\n      );\n    }\n\n    // создать представление для финального окна\n    this.view = new ResultScreenView(message);\n    this.view.onRestartGame = Application.showStart;\n    this.element = this.view.element;\n    // вернуть текущий объект\n    return this;\n  }\n\n  async _dataSync() {\n    // показываем окно синхронизации ресурсов\n    this.loadAnimationElement = new ModalLoadAnimationView().element;\n    showScreen(this.loadAnimationElement, false);\n\n    try {\n      // загружаем статистику предыдущих игор с сервера\n      const loadenStatistics = await loadStatistics();\n      // обновляем статистику на основе текущей игры и загруженных данных\n      // и сохраняем локально для отображения результатов игры\n      GAME_DATA.statistics = this._updateRatings(loadenStatistics);\n      // также отправляем статистику на сервер\n      await sendStatistics(GAME_DATA.statistics);\n    } finally {\n      // в любом случае убираем анимацию синхронизации ресурсов\n      this.loadAnimationElement.remove();\n    }\n  }\n\n  _updateRatings(loadenStatistics) {\n    // вычисляем результат текущей игры\n    const {statistics, wrong} = this.model.state;\n    this._userResult = calcUserResult(statistics, wrong, statistics.length);\n    // обновляем статистику игор на основе текущей игры и загруженных данных предыдущих игор\n    return updateRatings(loadenStatistics, this._userResult.ball);\n  }\n}\n\nexport default function createResultScreen(model) {\n  const resultScreen = new ResultScreen(model);\n  return resultScreen.createResultScreen();\n}\n","import StartScreen from './presenters/start-screen.js';\nimport LevelScreen from './presenters/level-screen.js';\nimport createResultScreen from './presenters/result-screen.js';\nimport {showScreen} from './utilities.js';\n\nexport default class Application {\n\n  static showStart() {\n    const start = new StartScreen();\n    showScreen(start.element);\n  }\n\n  static showGameLevel() {\n    const level = new LevelScreen();\n    showScreen(level.element);\n  }\n\n  static showStatistics(model) {\n    createResultScreen(model).then((screenView) => showScreen(screenView.element));\n  }\n}\n","/**\n * Модуль содержит класс ModalErrorView\n * Который содержит представление для стартового экрана игры\n */\n\nimport AbstractView from './abstract-view.js';\n\n// шаблон окна\nconst modalTemplate = (message) => `<div class=\"modal__overlay\">\n    <section class=\"modal\">\n      <h2 class=\"modal__title\">Произошла ошибка!</h2>\n      <p class=\"modal__text\">${message}</p>\n    </section>\n  </div>`;\n\nexport default class ModalErrorView extends AbstractView {\n\n  constructor(message = 'Статус: 404. Пожалуйста, перезагрузите страницу.') {\n    super();\n    this.message = message;\n  }\n\n  /**\n   * Переопределение абстрактного метода родителя\n   * Возвращает строку с шаблоном разметки модального окна ошибки\n   */\n  get _template() {\n    return modalTemplate(this.message);\n  }\n}\n","/**\n * Начальный файл запуска игры\n */\n\nimport {startNewGame} from './process/process.js';\n\nstartNewGame();\n"],"names":["GAME_PARAM","INITIAL_STATE","level","wrong","lives","totalTime","currentTime","statistics","GAME_DATA","appId","questions","staticData","artist","name","image","src","genre","getRandomIntInclusive","min","max","bottomLimit","Math","ceil","upperLimit","floor","random","getTimeComponents","time","date","Date","setTime","timeComponents","toLocaleTimeString","hour12","split","minuts","seconds","wordFrom","number","word","num","isNaN","showScreen","element","containerClear","screensContainer","document","querySelector","textContent","append","SERVER_URLS","async","loadQuestions","gameQuestions","types","titles","questionTemplate","type","title","srcs","answers","answerTemplate","img","isCorrect","forEach","index","question","Object","assign","questionIndexes","Set","answerIndexes","size","add","length","Array","from","questionVariants","tempArr","currentSrc","push","currentAnswer","answer","has","getQuestions","response","fetch","method","redirect","checkServerResp","json","ok","Error","getFiles","loadFileFunc","urls","requests","map","url","Promise","all","getAudioFile","resolve","reject","audioElement","Audio","addEventListener","getImageFile","imgElement","Image","preloadResource","gameData","resourceUrls","audioUrls","imgUrls","audio","getResourceUrls","AbstractView","_template","this","_element","container","_render","_bind","firstElementChild","template","createElement","innerHTML","StartScreenView","onStartBtnClick","evt","preventDefault","StartScreen","constructor","_screenView","Application","showGameLevel","LOW_TIME_CLASS","LevelHeaderScreenView","gameState","super","onBackBtnClick","updateTime","state","timerRootElement","timeMinutsElement","timeSecondsElement","classList","contains","_updateTimeCircle","join","headerTemplate","timeCircleElement","circleLength","PI","getAttribute","stroke","offset","timePercent","getTimeAnimationRadius","style","strokeDasharray","strokeDashoffset","PLAY_CLASS","PAUSE_CLASS","TrackContoller","controlBtns","querySelectorAll","audioElements","controlBtn","parentElement","_controlToAudioElement","Map","set","_prevControlBtn","_prevAudioElement","_onControlBtnClick","target","_onAudioTrackEnd","currentControlBtn","closest","currentAudioElement","get","find","_pauseTrack","_playTrack","indexOf","remove","play","pause","DEBUG_STYLE","LevelScreenView","levelQuestion","trackController","_isAnswerSelected","answersSelected","_answerBtns","btn","checked","selectGenreTemplate","onAnswerSubmit","_bindScreenSelectArtist","_bindScreenSelectGenre","form","includes","_onFormSubmit","btnSubmit","select","disabled","ModalConfirmView","onConfirm","onCancel","confirmBtn","cancelBtn","closeBtn","onCancelBtnClick","stopPropagation","GameModel","restart","freeze","_state","currentLevel","levelStatistics","result","nextLevel","hasNexLevel","undefined","die","isDie","tick","hasMoreTime","LevelScreen","model","_createController","timerID","setTimeout","stopTimer","showStatistics","viewHeader","clearTimeout","_levelEndTime","selectedAnswers","levelAnswers","filter","_","getSelectedAnswers","viewBody","_levelStartTime","levelAnswer","hasWrongAnswer","_checkGameEnd","_updateHeader","headerElement","_showModalConfirm","prepend","modalConfirmView","startNewGame","ResultScreenView","gameEndMessage","message","onRestartGame","ModalLoadAnimationView","getResultMessage","endFlags","results","userResult","overTime","positionInRating","totalUsers","percentRating","round","getResultPosition","ball","quickAnswer","calcUserResult","wrongAnswer","totalQuestion","reduce","sum","ResultScreen","_dataSync","err","_userResult","view","showStart","loadAnimationElement","loadenStatistics","loadStatistics","_updateRatings","body","headers","JSON","stringify","sendStatistics","newRatings","indexInRating","findIndex","splice","updateRatings","static","createResultScreen","then","screenView","ModalErrorView","window","navigator","userAgent","now","finally","catch"],"mappings":"yBAIA,MAAMA,EAGO,IAHPA,EAIO,GAJPA,EAKM,IALNA,EAMK,GANLA,EAOQ,EAPRA,EAQU,EARVA,GASQ,ECRDC,EAAgB,CAC3BC,MDDW,ECEXC,MAAO,EACPC,MDFY,ECGZC,UAAWL,EACXM,YAAaN,EACbO,WAAY,IAGDC,EAAY,CACvBC,MAAO,GACPC,UAAW,GACXH,WAAY,ICVC,IAAAI,EAAA,CACb,CACEC,OAAQ,gBACRC,KAAM,cACNC,MAAO,+GACPC,IAAK,yIACLC,MAAO,QAET,CACEJ,OAAQ,eACRC,KAAM,6BACNC,MAAO,iDACPC,IAAK,kJACLC,MAAO,QAET,CACEJ,OAAQ,cACRC,KAAM,eACNC,MAAO,gHACPC,IAAK,kJACLC,MAAO,WAET,CACEJ,OAAQ,OACRC,KAAM,cACNC,MAAO,kGACPC,IAAK,qIACLC,MAAO,OAET,CACEJ,OAAQ,eACRC,KAAM,YACNC,MAAO,iDACPC,IAAK,8IACLC,MAAO,OAET,CACEJ,OAAQ,kBACRC,KAAM,UACNC,MAAO,8EACPC,IAAK,oIACLC,MAAO,eCtCJ,SAASC,EAAsBC,EAAM,EAAGC,GAC7C,MAAMC,EAAcC,KAAKC,KAAKJ,GACxBK,EAAaF,KAAKG,MAAML,GAC9B,OAAOE,KAAKG,MAAMH,KAAKI,UAAYF,EAAaH,EAAc,IAAMA,EAmB/D,SAASM,EAAkBC,GAChC,MAAMC,EAAO,IAAIC,KACjBD,EAAKE,QAAe,IAAPH,GACb,MAAMI,EAAiBH,EAAKI,mBAAmB,QAAS,CAACC,QAAQ,IAAQC,MAAM,KAI/E,MAAO,CAACC,OAHOJ,EAAe,GAGdK,QAFAL,EAAe,IAa1B,SAASM,EAASC,EAAQC,GAC/B,MAAMC,GAAOF,EACb,GAAIG,MAAMD,GACR,OAAOD,EAAK,GAId,MAAO,GAAGC,KAAOD,EAAMC,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAM,EAD5C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACuCA,EAAM,GAAK,EAAKA,EAAM,GAAK,MAuB3F,SAASE,EAAWC,EAASC,GAAiB,GAEnD,MAAMC,EAAmBC,SAASC,cAAc,SAE5CH,IACFC,EAAiBG,YAAc,IAGjCH,EAAiBI,OAAON,GC/E1B,MAAMO,EACO,6CADPA,EAEW,yBAFXA,EAGW,0BAQVC,eAAeC,IAEpB,MAAMC,EA4FR,SAAsBC,EAAOC,GAE3B,MAAMC,EAAmB,CACvBC,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,QAAS,IAILC,EAAiB,CACrBjD,OAAQ,GACRC,KAAM,GACNiD,IAAK,GACL/C,IAAK,GACLgD,WAAW,GAIPV,EAAgB,GAuEtB,OArEAC,EAAMU,SAAQ,CAACP,EAAMQ,KACnB,MAAMC,EAAWC,OAAOC,OAAO,GAAIZ,GAEnCU,EAAST,KAAOA,EAChBS,EAASR,MAAQH,EAAOU,GAIxB,MAAMI,EAAkB,IAAIC,IACtBC,EAAgB,IAAID,IAE1B,GAAa,WAATb,EAAmB,CAGrB,KAAOc,EAAcC,KAAO,GAC1BD,EAAcE,IAAIxD,EAAsB,EAAGN,EAAW+D,OAAS,IAIjEL,EAAgBI,IAAIE,MAAMC,KAAKL,GAAetD,EAAsB,EAAGsD,EAAcC,KAAO,UAEvF,GAAa,UAATf,EAAkB,CAG3B,KAAOc,EAAcC,KAAO,GAC1BD,EAAcE,IAAIxD,EAAsB,EAAGN,EAAW+D,OAAS,IAMjE,MAAMG,EAAmB5D,EAAsB,EAAG,GAElD,KAAOoD,EAAgBG,KAAOK,GAC5BR,EAAgBI,IAAIE,MAAMC,KAAKL,GAAetD,EAAsB,EAAGsD,EAAcC,KAAO,KAOhG,IAAIM,EAAU,GAEdT,EAAgBL,SAASe,IACvBD,EAAQE,KAAKrE,EAAWoE,GAAYhE,QAGtCmD,EAASP,KAAOQ,OAAOC,OAAO,GAAIU,GAClCA,EAAU,GAGVP,EAAcP,SAASiB,IACrB,MAAMC,EAASf,OAAOC,OAAO,GAAIP,GAEjCqB,EAAOtE,OAASD,EAAWsE,GAAerE,OAC1CsE,EAAOrE,KAAOF,EAAWsE,GAAepE,KACxCqE,EAAOpB,IAAMnD,EAAWsE,GAAenE,MACvCoE,EAAOnE,IAAMJ,EAAWsE,GAAelE,IACvCmE,EAAOnB,UAAYM,EAAgBc,IAAIF,GAEvCH,EAAQE,KAAKE,MAGfhB,EAASN,QAAUkB,EAGnBzB,EAAc2B,KAAKd,MAGdb,EAtLe+B,CAClB,CAAC,SAAU,QAAS,QAAS,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UACtF,CAAC,2BAA4B,qBAAsB,sBAAuB,qBACxE,2BAA4B,2BAA4B,qBAAsB,4BAC9E,2BAA4B,6BAG5BC,QAAiBC,MAAMpC,EAAuB,CAClDqC,OAAQ,MACRC,SAAU,WASZ,OANAC,EAAgBJ,SAEVA,EAASK,OAIRrC,EA6DT,SAASoC,EAAgBJ,GACvB,IAAKA,EAASM,GAEZ,MAAM,IAAIC,MClEd,SAASC,EAASC,EAAcC,GAC9B,MAAMC,EAAWD,EAAKE,KAAKC,GAAQJ,EAAaI,KAEhD,OAAOC,QAAQC,IAAIJ,GAQrB,SAASK,EAAaH,GACpB,OAAO,IAAIC,SAAQ,SAAUG,EAASC,GACpC,MAAMC,EAAe,IAAIC,MACzBD,EAAaE,iBAAiB,iBAAkBJ,GAAS,GACzDE,EAAaE,iBAAiB,QAASH,GAAQ,GAC/CC,EAAazF,IAAMmF,KASvB,SAASS,EAAaT,GACpB,OAAO,IAAIC,SAAQ,SAAUG,EAASC,GACpC,MAAMK,EAAa,IAAIC,MACvBD,EAAWF,iBAAiB,OAAQJ,GAAS,GAC7CM,EAAWF,iBAAiB,QAASH,GAAQ,GAC7CK,EAAW7F,IAAMmF,KAUN/C,eAAe2D,EAAgBC,GAC5C,MAAMC,EAlER,SAAyBtG,GACvB,MAAMuG,EAAY,IAAI3C,IAChB4C,EAAU,IAAI5C,IAEpB5D,EAAUsD,SAASE,IACjBA,EAASP,KAAKK,SAASjD,GAAQkG,EAAUxC,IAAI1D,KAC7CmD,EAASN,QAAQI,SAASkB,IACxB+B,EAAUxC,IAAIS,EAAOnE,KACrBmG,EAAQzC,IAAIS,EAAOpB,WAIvB,MAAMiC,EAAO,CAACoB,MAAO,GAAIrG,MAAO,IAIhC,OAHAiF,EAAKoB,MAAQxC,MAAMC,KAAKqC,GACxBlB,EAAKjF,MAAQ6D,MAAMC,KAAKsC,GAEjBnB,EAkDcqB,CAAgBL,SAE/BlB,EAASc,EAAcK,EAAalG,aACpC+E,EAASQ,EAAcW,EAAaG,OC5E7B,MAAME,EAMfC,gBACF,MAAM,IAAI1B,MAAM,oEAQdjD,cAGF,GAAI4E,KAAKC,SACP,OAAOD,KAAKC,SAGd,IAAIC,EAAYF,KAAKG,QAAQH,KAAKD,WAOlC,OANAG,EAAYF,KAAKI,MAAMF,GAIvBF,KAAKC,SAAWC,EAAUG,kBAEnBL,KAAKC,SAQdE,QAAQG,GACN,MAAMJ,EAAY3E,SAASgF,cAAc,OAGzC,OAFAL,EAAUM,UAAYF,EAEfJ,EASTE,MAAMF,GACJ,OAAOA,GCrCI,MAAMO,UAAwBX,EAO3CY,mBAOIX,gBACF,MA3BwB,oiBAoC1BK,MAAMF,GASJ,OARgBA,EAAU1E,cAAc,oBAGhC2D,iBAAiB,SAAUwB,IACjCA,EAAIC,iBACJZ,KAAKU,qBAGAR,GC9CI,MAAMW,EAEnBC,cACEd,KAAKe,YAAc,IAAIN,EACvBT,KAAKe,YAAYL,gBAAkBM,EAAYC,cAC/CjB,KAAK5E,QAAU4E,KAAKe,YAAY3F,SCHpC,MAAM8F,EAAiB,yBA6BR,MAAMC,UAA8BrB,EAEjDgB,YAAYM,GACVC,QACArB,KAAKoB,UAAYA,EAQnBE,kBAOAC,WAAWC,GACT,MAAMC,EAAmBzB,KAAK5E,QAAQI,cAAc,iBAC9CkG,EAAoB1B,KAAK5E,QAAQI,cAAc,gBAC/CmG,EAAqB3B,KAAK5E,QAAQI,cAAc,gBAElDgG,EAAMzI,aAAeN,IAAuBgJ,EAAiBG,UAAUC,SAASX,IAClFO,EAAiBG,UAAU1E,IAAIgE,GAIjC,MAAMtG,OAACA,EAAMC,QAAEA,GAAWV,EAAkBqH,EAAMzI,aAElD2I,EAAkBjG,YAAcb,EAChC+G,EAAmBlG,YAAcZ,EAGjCmF,KAAK8B,kBAAkBN,EAAM1I,UAAW0I,EAAMzI,aAQ5CgH,gBACF,MAtEmB,CAACyB,IACtB,MAAM5G,OAACA,EAAMC,QAAEA,GAAWV,EAAkBqH,EAAMzI,aAElD,MAAO,ulBAW2B6B,2FAEAC,yEAI1B,IAAIuC,MAAMoE,EAAM5I,MAAQ,GAAGmJ,KAAK,6DAkD/BC,CAAehC,KAAKoB,WAS7BhB,MAAMF,GASJ,OARgBA,EAAU1E,cAAc,eAGhC2D,iBAAiB,SAAUwB,IACjCA,EAAIC,iBACJZ,KAAKsB,oBAGApB,EAQT4B,kBAAkBhJ,EAAWC,GAC3B,MAAMkJ,EAAoBjC,KAAK5E,QAAQI,cAAc,gBAE/C0G,EAAepI,KAAKC,KAAK,EAAID,KAAKqI,GAAKF,EAAkBG,aAAa,OAEtEC,OAACA,EAAMC,OAAEA,GN7CZ,SAAgCC,EAAaL,GAClD,MAAMG,EAASvI,KAAKC,KAAKmI,GAGzB,MAAO,CAACG,SAAQC,OAFDxI,KAAKG,OAAO,EAAIsI,GAAeF,IM2CnBG,CAAuBzJ,EAAcD,EAAWoJ,GAEzED,EAAkBQ,MAAMC,gBAAkB,GAAGL,MAC7CJ,EAAkBQ,MAAME,iBAAmB,GAAGL,OC9GlD,MACMM,EAAa,sBACbC,EAAc,uBAEL,MAAMC,EAEnBhC,YAAYZ,GAEVF,KAAK+C,YAAc3F,MAAMC,KAAK6C,EAAU8C,iBAAiB,mBACzDhD,KAAKiD,cAAgBjD,KAAK+C,YAAYrE,KAAKwE,GAAeA,EAAWC,cAAc3H,cAAc,WAGjGwE,KAAKoD,uBAAyB,IAAIC,IAClCrD,KAAK+C,YAAYtG,SAAQ,CAACyG,EAAYxG,IAAUsD,KAAKoD,uBAAuBE,IAAIJ,EAAYlD,KAAKiD,cAAcvG,MAI/GsD,KAAKuD,gBAAkB,KACvBvD,KAAKwD,kBAAoB,KAGzBxD,KAAK+C,YAAYtG,SAASyG,GAAeA,EAAW/D,iBAAiB,SAAUwB,IAC7EA,EAAIC,iBACJZ,KAAKyD,mBAAmB9C,EAAI+C,aAI9B1D,KAAKiD,cAAcxG,SAASwC,GAAiBA,EAAaE,iBAAiB,SAAUwB,IACnFX,KAAK2D,iBAAiBhD,EAAI+C,aAU9BD,mBAAmBC,GAEjB,MAAME,EAAoBF,EAAOG,QAAQ,kBACnCC,EAAsB9D,KAAKoD,uBAAuBW,IAAIH,GAGvD5D,KAAKuD,kBACRvD,KAAKuD,gBAAkBvD,KAAK+C,YAAYiB,MAAMd,GAAeA,EAAWtB,UAAUC,SAASgB,KAC3F7C,KAAKwD,kBAAoBxD,KAAKoD,uBAAuBW,IAAI/D,KAAKuD,kBAM5DvD,KAAKuD,iBAAmBvD,KAAKuD,kBAAoBK,GAAqB5D,KAAKuD,gBAAgB3B,UAAUC,SAASgB,IAChH7C,KAAKiE,YAAYjE,KAAKuD,gBAAiBvD,KAAKwD,oBAI7CxD,KAAKuD,gBAAiBvD,KAAKwD,mBAAqB,CAACI,EAAmBE,GAIjEF,EAAkBhC,UAAUC,SAASgB,GACvC7C,KAAKiE,YAAYL,EAAmBE,GAEpC9D,KAAKkE,WAAWN,EAAmBE,GASvCH,iBAAiBD,GACf,MAAMI,EAAsBJ,EACtBE,EAAoB5D,KAAK+C,YAAY/C,KAAKiD,cAAckB,QAAQL,IAElEF,GAAqBA,EAAkBhC,UAAUC,SAASgB,IAC5D7C,KAAKiE,YAAYL,EAAmBE,GAWxCI,WAAWhB,EAAYjE,GACrBiE,EAAWtB,UAAUwC,OAAOxB,GAC5BM,EAAWtB,UAAU1E,IAAI2F,GAEzB5D,EAAaoF,OAUfJ,YAAYf,EAAYjE,GACtBiE,EAAWtB,UAAUwC,OAAOvB,GAC5BK,EAAWtB,UAAU1E,IAAI0F,GAEzB3D,EAAaqF,SCvGjB,MAAMC,EAAc,yBAiDL,MAAMC,UAAwB1E,EAE3CgB,YAAY2D,GACVpD,QACArB,KAAKyE,cAAgBA,EAErBzE,KAAK0E,gBAAkB,IAAI5B,EAAe9C,KAAK5E,SAI/C4E,KAAK2E,mBAAoB,EAOvBC,sBACF,OAAO5E,KAAK6E,YAAYnG,KAAKoG,GAAQA,EAAIC,UAQvChF,gBAEF,MAAoC,WAA5BC,KAAKyE,cAAcvI,KA1EY,uGAAbS,EA0E2CqD,KAAKyE,eAxEvCtI,iJAGpBQ,EAASP,KAAK,4EAI3BO,EAASN,QAAQqC,KAAI,CAACf,EAAQjB,IAChC,8GACmFiB,EAAOtE,sBAAsBqD,EAAQ,sDAC5EA,EAAQ,kDACZiB,EAAOpB,aAAaoB,EAAOtE,kBAAmBsE,EAAOnB,UAA2B+H,EAAc,iBAChI5G,EAAOtE,uCAGb0I,KAAK,+CAOmB,CAACpF,GAAa,sGAEZA,EAASR,wDAG/BQ,EAASN,QAAQqC,KAAI,CAACf,EAAQjB,IAClC,2DAC2C,IAAVA,EAAc,uBAAyB,yGAEvDiB,EAAOnE,OAAiB,IAAVkD,EAAc,WAAa,qEAEpBiB,EAAOnB,UAA2B+H,EAAc,iGACA5G,EAAOtE,sBAAsBqD,EAAQ,uDAC9EA,EAAQ,kDAE5CqF,KAAK,mIAmC6EiD,CAAoBhF,KAAKyE,eA1E3F,IAAC9H,EAkF5BsI,kBASA7E,MAAMF,GAEJ,MAAoC,WAA5BF,KAAKyE,cAAcvI,KAAqB8D,KAAKkF,wBAAwBhF,GAAaF,KAAKmF,uBAAuBjF,GAQxHgF,wBAAwBhF,GACtB,MAAMkF,EAAOlF,EAAU1E,cAAc,iBAuBrC,OAtBAwE,KAAK6E,YAAc,IAAI3E,EAAU8C,iBAAiB,mBAGlDoC,EAAKjG,iBAAiB,SAAUwB,IAEzBX,KAAK6E,YAAYQ,SAAS1E,EAAI+C,UAMnC1D,KAAK2E,mBAAoB,EAGzB3E,KAAKiF,qBAIPG,EAAKjG,iBAAiB,UAAWwB,IAC/BX,KAAKsF,cAAc3E,MAGdT,EAQTiF,uBAAuBjF,GACrB,MAAMkF,EAAOlF,EAAU1E,cAAc,iBAC/B+J,EAAYrF,EAAU1E,cAAc,iBAqB1C,OApBAwE,KAAK6E,YAAc,IAAI3E,EAAU8C,iBAAiB,iBAGlDoC,EAAKjG,iBAAiB,SAAUwB,IAEzBX,KAAK6E,YAAYQ,SAAS1E,EAAI+C,UAKnC1D,KAAK2E,oBAAsB3E,KAAK4E,gBAAgBZ,MAAMwB,IAAsB,IAAXA,IAGjED,EAAUE,UAAYzF,KAAK2E,sBAG7BS,EAAKjG,iBAAiB,UAAWwB,IAC/BX,KAAKsF,cAAc3E,MAGdT,EAGToF,cAAc3E,GACZA,EAAIC,iBAGAZ,KAAK2E,mBACP3E,KAAKiF,kBC7JI,MAAMS,UAAyB5F,EAM5C6F,aAQAC,YAOI7F,gBACF,MAlCkB,ihBA2CpBK,MAAMF,GACJ,MAAM2F,EAAa3F,EAAU1E,cAAc,mBACrCsK,EAAY5F,EAAU1E,cAAc,kBACpCuK,EAAW7F,EAAU1E,cAAc,iBAEnCwK,EAAoBrF,IACxBA,EAAIsF,kBACJtF,EAAIC,iBACJZ,KAAK4F,YAYP,OATAE,EAAU3G,iBAAiB,QAAS6G,GACpCD,EAAS5G,iBAAiB,QAAS6G,GAEnCH,EAAW1G,iBAAiB,SAAUwB,IACpCA,EAAIsF,kBACJtF,EAAIC,iBACJZ,KAAK2F,eAGAzF,GClEI,MAAMgG,EAEnBpF,cACEd,KAAKmG,UAOH3E,YACF,OAAO5E,OAAOwJ,OAAOxJ,OAAOC,OAAO,GAAImD,KAAKqG,SAO1CC,mBACF,OAAOrN,EAAUE,UAAU6G,KAAKqG,OAAO1N,OASrCK,eAAWuN,GAEb,MAAMC,EAAS,CAACnK,QAAS,GAAIjC,KAAM,GACnCoM,EAAOnK,QAAQoB,KAAK8I,EAAgBlK,SACpCmK,EAAOpM,KAAOmM,EAAgBnM,KAG9B4F,KAAKqG,OAAOrN,WAAWyE,KAAK+I,GAM9BL,UACEnG,KAAKqG,OAASzJ,OAAOC,OAAO,GAAInE,GAChCsH,KAAKqG,OAAOrN,WAAa,GAM3ByN,YACEzG,KAAKqG,OAAO1N,QAOd+N,cACE,YAAsDC,IAA/C1N,EAAUE,UAAU6G,KAAKqG,OAAO1N,MAAQ,GAMjDiO,MACE5G,KAAKqG,OAAOzN,QAOdiO,QACE,OAAO7G,KAAKqG,OAAOzN,MAAQoH,KAAKqG,OAAOxN,MAMzCiO,OACE9G,KAAKqG,OAAOtN,cAOdgO,cACE,OAAO/G,KAAKqG,OAAOtN,YAAc,GC9EtB,MAAMiO,EAEnBlG,cACEd,KAAKiH,MAAQ,IAAIf,EAEjBlG,KAAKkH,kBAAkBlH,KAAKiH,OAG9BH,OACE9G,KAAKmH,QAAUC,YAAW,KAGxB,GAFApH,KAAKiH,MAAMH,QAEN9G,KAAKiH,MAAMF,cAKd,OAJA/G,KAAKqH,iBAGLrG,EAAYsG,eAAetH,KAAKiH,OAIlCjH,KAAKuH,WAAWhG,WAAWvB,KAAKiH,MAAMzF,OAEtCxB,KAAK8G,SACJrO,GAGL4O,YAEEG,aAAaxH,KAAKmH,SAElBnH,KAAKyH,cAAgBzH,KAAKiH,MAAMzF,MAAMzI,YAGxC0N,YACEzG,KAAKqH,YAEL,MAAMK,EClBH,SAA4BA,EAAiBC,GAClD,OAAOA,EAAaC,QAAO,CAACC,EAAGnL,IAAUgL,EAAgBhL,KDiB/BoL,CAAmB9H,KAAK+H,SAASnD,gBAAiB5E,KAAKiH,MAAMX,aAAajK,SAClG2D,KAAKiH,MAAMjO,WAAa,CAACqD,QAASqL,EAAiBtN,KAAO4F,KAAKgI,gBAAkBhI,KAAKyH,eCjCnF,SAAwBC,EAAiBC,GAI9C,YAAuBhB,IAFHgB,EAAa3D,MAAK,CAACiE,EAAavL,IAAUuL,EAAYzL,YAAckL,EAAgBhL,KDkClGwL,CAAelI,KAAK+H,SAASnD,gBAAiB5E,KAAKiH,MAAMX,aAAajK,UACxE2D,KAAKiH,MAAML,MAIT5G,KAAKmI,gBAGPnH,EAAYsG,eAAetH,KAAKiH,QAIlCjH,KAAKiH,MAAMR,YAEXzG,KAAKkH,kBAAkBlH,KAAKiH,OAC5B9L,EAAW6E,KAAK5E,UAGlB8L,kBAAkBD,GAChBjH,KAAK+H,SAAW,IAAIvD,EAAgByC,EAAMX,cAE1CtG,KAAK+H,SAAS9C,eAAiB,IAAMjF,KAAKyG,YAC1CzG,KAAK5E,QAAU4E,KAAK+H,SAAS3M,QAC7B4E,KAAKoI,gBAGLpI,KAAKgI,gBAAkBf,EAAMzF,MAAMzI,YAEnCiH,KAAK8G,OAGPsB,gBACMpI,KAAKqI,eACPrI,KAAKqI,cAAcjE,SAGrBpE,KAAKuH,WAAa,IAAIpG,EAAsBnB,KAAKiH,MAAMzF,OACvDxB,KAAKuH,WAAWhG,WAAWvB,KAAKiH,MAAMzF,OACtCxB,KAAKuH,WAAWjG,eAAiB,IAAMtB,KAAKsI,oBAE5CtI,KAAKqI,cAAgBrI,KAAKuH,WAAWnM,QACrC4E,KAAK5E,QAAQmN,QAAQvI,KAAKqI,eAG5BF,gBACE,OAAQnI,KAAKiH,MAAMP,eAAiB1G,KAAKiH,MAAMJ,UAAY7G,KAAKiH,MAAMF,cAGxEuB,oBACEtI,KAAKwI,iBAAmB,IAAI9C,EAC5B1F,KAAKwI,iBAAiB5C,SAAW,IAAM5F,KAAKwI,iBAAiBpN,QAAQgJ,SACrEpE,KAAKwI,iBAAiB7C,UAAY,IAAM8C,IACxCtN,EAAW6E,KAAKwI,iBAAiBpN,SAAS,IE5F/B,MAAMsN,UAAyB5I,EAE5CgB,YAAY6H,GACVtH,QACArB,KAAK4I,QAAUD,EAQjBE,iBAOI9I,gBACF,MA3BsC,mJA2BVC,KAAK4I,uGASnCxI,MAAMF,GAQJ,OANkBA,EAAU1E,cAAc,mBAChC2D,iBAAiB,SAAUwB,IACnCA,EAAIC,iBACJZ,KAAK6I,mBAGA3I,GC1CI,MAAM4I,UAA+BhJ,EAElDgB,YAAY8H,EAAU,4BACpBvH,QACArB,KAAK4I,QAAUA,EAOb7I,gBACF,MAd+B,6CAcVC,KAAK4I,iBCCvB,SAASG,EAAiBC,EAAUxH,EAAOyH,EAASC,GAEzD,GAAIF,EAASnC,MACX,MAAO,sKAIT,GAAImC,EAASG,SACX,MAAO,gJAKT,MAAMvO,OAACA,EAAMC,QAAEA,GAAWV,EAAkBqH,EAAM1I,UAAY0I,EAAMzI,cAC9DqQ,iBAACA,EAAgBC,WAAEA,EAAUC,cAAEA,GAwEhC,SAA2BL,EAASC,GAEzC,MAAME,EAAmBH,EAAQ9E,QAAQ+E,GAAc,EAEvD,GAAuB,IAAnBD,EAAQ9L,OACV,MAAO,CAACiM,iBAAkB,EAAGC,WAAY,EAAGC,cAAe,KAG7D,MAAMD,EAAaJ,EAAQ9L,OACrBmM,EAAgBxP,KAAKyP,OAAOF,EAAaD,GAAoBC,EAAa,KAEhF,MAAO,CAACD,mBAAkBC,aAAYC,iBAnFgBE,CAAkBP,EAASC,EAAWO,MAW5F,MAAO,yFANmB3O,EAASF,EAAQ,CAAC,SAAU,SAAU,eACtCE,EAASD,EAAS,CAAC,UAAW,UAAW,yBAChDC,EAASoO,EAAWO,KAAM,CAAC,MAAO,QAAS,eACpC3O,EAASoO,EAAWQ,YAAa,CAAC,UAAW,UAAW,0BACxD5O,EAAS0G,EAAM5I,MAAO,CAAC,SAAU,SAAU,yDAI/BwQ,cAA6BC,sBAA+BC,iBAa7F,SAASK,EAAetN,EAASuN,EAAaC,GAEnD,MAAMH,EAAcrN,EAAQyN,QAAO,CAACC,EAAKpM,IAAWoM,KAAoBpM,EAAOvD,KAiE5D3B,IAjEmE,GAOtF,MAAO,CAACiR,cAAaD,KALGC,EAAcjR,GACXoR,EAAgBH,GAAejR,EAClCmR,EAAcnR,GCrDxC,MAAMuR,EAEJlJ,YAAYmG,GAEVjH,KAAKiH,MAAQA,EAGfrL,2BAEE,IAAIgN,EAGJ,IAAK5I,KAAKiH,MAAMP,gBAAkB1G,KAAKiH,MAAMJ,SAAW7G,KAAKiH,MAAMF,cAEjE,UACQ/G,KAAKiK,YACX,MAAOC,GACPtB,EApBa,iLAyCjB,OAdKA,IACHA,EAAUG,EACN,CAAClC,MAAO7G,KAAKiH,MAAMJ,QAASsC,UAAWnJ,KAAKiH,MAAMF,eAClD/G,KAAKiH,MAAMzF,MACXvI,EAAUD,WACVgH,KAAKmK,cAKXnK,KAAKoK,KAAO,IAAI1B,EAAiBE,GACjC5I,KAAKoK,KAAKvB,cAAgB7H,EAAYqJ,UACtCrK,KAAK5E,QAAU4E,KAAKoK,KAAKhP,QAElB4E,KAGTpE,kBAEEoE,KAAKsK,sBAAuB,IAAIxB,GAAyB1N,QACzDD,EAAW6E,KAAKsK,sBAAsB,GAEtC,IAEE,MAAMC,QfhBL3O,iBAGA3C,EAAUD,WAAWmE,SACxBlE,EAAUD,WAAa,CAAC,GAAI,GAAI,IAIlC,MAAM2F,EAAM,GAAGhD,WAAmC1C,EAAUC,QAGtD4E,QAAiBC,MAAMY,EAAK,CAChCX,OAAQ,MACRC,SAAU,WAOZ,OAHAC,EAAgBJ,SACVA,EAASK,OAERlF,EAAUD,WeJkBwR,GAG/BvR,EAAUD,WAAagH,KAAKyK,eAAeF,SfS1C3O,eAA8B5C,GAEnCC,EAAUD,WAAaA,EAGvB,MAAM2F,EAAM,GAAGhD,WAAmC1C,EAAUC,QACtDwR,EAAO,CAACrO,QAASrD,GAYvBkF,QATuBH,MAAMY,EAAK,CAChCX,OAAQ,OACR2M,QAAS,CACP,eAAgB,kCAElBD,KAAME,KAAKC,UAAUH,MerBbI,CAAe7R,EAAUD,YACvB,QAERgH,KAAKsK,qBAAqBlG,UAI9BqG,eAAeF,GAEb,MAAMvR,WAACA,EAAUJ,MAAEA,GAASoH,KAAKiH,MAAMzF,MAGvC,OAFAxB,KAAKmK,YAAcR,EAAe3Q,EAAYJ,EAAOI,EAAWmE,QDE7D,SAAuB8L,EAASC,GAGrC,GAAID,EAAQ5D,SAAS6D,GACnB,OAAOD,EAIT,MAAM8B,EAAa,IAAI9B,GAEjB+B,EAAiBD,EAAWA,EAAW5N,OAAS,GAAK+L,EACzD6B,EAAWE,WAAW7P,GAAYA,EAAU8N,IAAc6B,EAAW5N,OAKvE,OAHA4N,EAAWG,OAAOF,EAAe,EAAG9B,GAG7B6B,EChBEI,CAAcZ,EAAkBvK,KAAKmK,YAAYV,OC5E7C,MAAMzI,EAEnBoK,mBAEEjQ,GADc,IAAI0F,GACDzF,SAGnBgQ,uBAEEjQ,GADc,IAAI6L,GACD5L,SAGnBgQ,sBAAsBnE,IDoET,SAA4BA,GAEzC,OADqB,IAAI+C,EAAa/C,GAClBoE,sBCrElBA,CAAmBpE,GAAOqE,MAAMC,GAAepQ,EAAWoQ,EAAWnQ,YCH1D,MAAMoQ,UAAuB1L,EAE1CgB,YAAY8H,EAAU,oDACpBvH,QACArB,KAAK4I,QAAUA,EAOb7I,gBACF,MAnB+B,kJAmBVC,KAAK4I,yCNgBvB,SAASH,IAEd,MAAM6B,GAAuB,IAAIxB,GAAyB1N,QAC1DD,EAAWmP,GAAsB,GAIjCzO,IACCyP,MAAMnS,IACLF,EAAUE,UAAYA,EACtBF,EAAUC,MZ9BL,GAFSuS,OAAOC,UAAUC,UAAUhR,MAAM,KAAKuQ,QAAQ,EAAG,MAE5C5Q,KAAKsR,QY+BjBzS,KAGRmS,MAAMnS,GAAcoG,EAAgBpG,KAEpC0S,SAAQ,IAAMvB,EAAqBlG,WAEnCkH,MAAK,IAAMtK,EAAYqJ,cAEvByB,OAAM,IAAM3Q,GAAW,IAAIqQ,GAAiBpQ,SAAS,KOzDxDqN"}