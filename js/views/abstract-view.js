/**
 * Модуль содержит абстрактный класс AbstractView
 * Который описывает базовый функциона для всех модулей представления
 * Должен расширяться конкретными представлениями
 */

export default class AbstractView {

  /**
   * Абстрактный метод возвращающий строку с разметкой предстваления
   * В конкретных представлениях должен быть переопределен
   */
  get _template() {
    throw new Error('Абстрактный метод возвращающий строку с разметкой представления.');
  }

  /**
   * Метод, возвращающий DOM-элемент представления
   * Сгенерированный на основе шаблона с навешенными обработчиками событий
   * @return {object} - DOM-элемент, сгенерированный на основе шаблона с навешенными обработчиками событий
   */
  get element() {

    // при повторном запросе возвращает ранее сгенерированный элемент
    if (this._element) {
      return this._element;
    }

    let container = this._render(this._template);
    container = this._bind(container);
    // используется children чтобы "вынять" все дочерние элементы из контейнера DIV
    // т.к. метод render возвращает элементы на основе шаблона внутри временного элемента DIV
    // и если DIV с сгенерированным содержимым вставлять в разметку как есть, то может сломаться верстка
    this._element = container.children;

    return this._element;
  }

  /**
   * Метод, создающий DOM-элемент на основе строки-шаблона
   * @param {string} template - строка, содержащая HTML-разметку элемента
   * @return {object} - DOM-элемент, сгенерированный на основе шаблона
   */
  _render(template) {
    const container = document.createElement('div');
    container.innerHTML = template;

    return container;
  }

  /**
   * Метод, навешивающий обработчики событий на DOM-элементы, содержащиеся внутри переденного контейнера
   * По-умолчанию обработчиков не добавляет. При необходимости должен быть переопределен в наследниках для конкретных представлений.
   * @param {object} container - общий контейнер, содержащий DOM-элементы представления к которым нужно добавить обработчики
   * @return {object} - контейнер с DOM-элементами, на которые, при необходимости, добавлены обработчики
   */
  _bind(container) {
    return container;
  }
}
